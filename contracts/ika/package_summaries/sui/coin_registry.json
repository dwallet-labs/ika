{
  "id": {
    "address": "sui",
    "name": "coin_registry"
  },
  "doc": " Defines the system object for managing coin data in a central\n registry. This module provides a centralized way to store and manage\n metadata for all currencies in the Sui ecosystem, including their\n supply information, regulatory status, and metadata capabilities.",
  "immediate_dependencies": [
    {
      "address": "std",
      "name": "ascii"
    },
    {
      "address": "std",
      "name": "option"
    },
    {
      "address": "std",
      "name": "string"
    },
    {
      "address": "std",
      "name": "type_name"
    },
    {
      "address": "sui",
      "name": "bag"
    },
    {
      "address": "sui",
      "name": "balance"
    },
    {
      "address": "sui",
      "name": "coin"
    },
    {
      "address": "sui",
      "name": "derived_object"
    },
    {
      "address": "sui",
      "name": "object"
    },
    {
      "address": "sui",
      "name": "transfer"
    },
    {
      "address": "sui",
      "name": "tx_context"
    },
    {
      "address": "sui",
      "name": "types"
    },
    {
      "address": "sui",
      "name": "url"
    },
    {
      "address": "sui",
      "name": "vec_map"
    }
  ],
  "attributes": [],
  "functions": {
    "new_currency": {
      "source_index": 0,
      "index": 0,
      "doc": " Creates a new currency.\n\n Note: This constructor has no long term difference from `new_currency_with_otw`.\n This can be called from the module that defines `T` any time after it has been published.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key"
          ]
        }
      ],
      "parameters": [
        {
          "name": "registry",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CoinRegistry",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "decimals",
          "type_": "u8"
        },
        {
          "name": "symbol",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "name",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "description",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "icon_url",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin_registry"
            },
            "name": "CurrencyInitializer",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        },
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "TreasuryCap",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        }
      ]
    },
    "new_currency_with_otw": {
      "source_index": 1,
      "index": 1,
      "doc": " Creates a new currency with using an OTW as proof of uniqueness.\n\n This is a two-step operation:\n 1. `Currency` is constructed in the `init` function and sent to the `CoinRegistry`;\n 2. `Currency` is promoted to a shared object in the `finalize_registration` call;",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Drop"
          ]
        }
      ],
      "parameters": [
        {
          "name": "otw",
          "type_": {
            "NamedTypeParameter": "T"
          }
        },
        {
          "name": "decimals",
          "type_": "u8"
        },
        {
          "name": "symbol",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "name",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "description",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "icon_url",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin_registry"
            },
            "name": "CurrencyInitializer",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        },
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "TreasuryCap",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        }
      ]
    },
    "claim_metadata_cap": {
      "source_index": 2,
      "index": 2,
      "doc": " Claim a `MetadataCap` for a coin type.\n Only allowed from the owner of `TreasuryCap`, and only once.\n\n Aborts if the `MetadataCap` has already been claimed.\n Deleted `MetadataCap` cannot be reclaimed.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "TreasuryCap",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin_registry"
            },
            "name": "MetadataCap",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        }
      ]
    },
    "make_regulated": {
      "source_index": 3,
      "index": 3,
      "doc": " Allows converting a currency, on init, to regulated, which creates\n a `DenyCapV2` object, and a denylist entry. Sets regulated state to\n `Regulated`.\n\n This action is irreversible.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CurrencyInitializer",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "allow_global_pause",
          "type_": "bool"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "DenyCapV2",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        }
      ]
    },
    "make_supply_fixed_init": {
      "source_index": 4,
      "index": 4,
      "doc": " Initializer function to make the supply fixed.\n Aborts if Supply is `0` to enforce minting during initialization.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CurrencyInitializer",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "TreasuryCap",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "make_supply_burn_only_init": {
      "source_index": 5,
      "index": 5,
      "doc": " Initializer function to make the supply burn-only.\n Aborts if Supply is `0` to enforce minting during initialization.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CurrencyInitializer",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "TreasuryCap",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "make_supply_fixed": {
      "source_index": 6,
      "index": 6,
      "doc": " Freeze the supply by destroying the `TreasuryCap` and storing it in the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "TreasuryCap",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "make_supply_burn_only": {
      "source_index": 7,
      "index": 7,
      "doc": " Make the supply `BurnOnly` by giving up the `TreasuryCap`, and allowing\n burning of Coins through the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "TreasuryCap",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "finalize": {
      "source_index": 8,
      "index": 8,
      "doc": " Finalize the coin initialization, returning `MetadataCap`",
      "attributes": [
        {
          "Parameterized": [
            "allow",
            [
              {
                "Parameterized": [
                  "lint",
                  [
                    {
                      "Name": "share_owned"
                    }
                  ]
                ]
              }
            ]
          ]
        }
      ],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "builder",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin_registry"
              },
              "name": "CurrencyInitializer",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin_registry"
            },
            "name": "MetadataCap",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "NamedTypeParameter": "T"
                }
              }
            ]
          }
        }
      ]
    },
    "finalize_registration": {
      "source_index": 9,
      "index": 9,
      "doc": " The second step in the \"otw\" initialization of coin metadata, that takes in\n the `Currency<T>` that was transferred from init, and transforms it in to a\n \"derived address\" shared object.\n\n Can be performed by anyone.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "registry",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CoinRegistry",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "currency",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "transfer"
              },
              "name": "Receiving",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "sui",
                        "name": "coin_registry"
                      },
                      "name": "Currency",
                      "type_arguments": [
                        {
                          "phantom": true,
                          "argument": {
                            "NamedTypeParameter": "T"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "_ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "delete_metadata_cap": {
      "source_index": 10,
      "index": 10,
      "doc": " Delete the metadata cap making further updates of `Currency` metadata impossible.\n This action is IRREVERSIBLE, and the `MetadataCap` can no longer be claimed.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin_registry"
              },
              "name": "MetadataCap",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "burn": {
      "source_index": 11,
      "index": 11,
      "doc": " Burn the `Coin` if the `Currency` has a `BurnOnly` supply state.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "coin",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "Coin",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "burn_balance": {
      "source_index": 12,
      "index": 12,
      "doc": " Burn the `Balance` if the `Currency` has a `BurnOnly` supply state.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "balance",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "balance"
              },
              "name": "Balance",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "set_name": {
      "source_index": 13,
      "index": 13,
      "doc": " Update the name of the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "MetadataCap",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "name",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "set_description": {
      "source_index": 14,
      "index": 14,
      "doc": " Update the description of the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "MetadataCap",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "description",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "set_icon_url": {
      "source_index": 15,
      "index": 15,
      "doc": " Update the icon URL of the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "MetadataCap",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "icon_url",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "set_treasury_cap_id": {
      "source_index": 16,
      "index": 16,
      "doc": " Register the treasury cap ID for a migrated `Currency`. All currencies created with\n `new_currency` or `new_currency_with_otw` have their treasury cap ID set during\n initialization.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "TreasuryCap",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "migrate_legacy_metadata": {
      "source_index": 17,
      "index": 17,
      "doc": " Register `CoinMetadata` in the `CoinRegistry`. This can happen only once, if the\n `Currency` did not exist yet. Further updates are possible through\n `update_from_legacy_metadata`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "registry",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CoinRegistry",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "legacy",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "CoinMetadata",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "_ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "update_from_legacy_metadata": {
      "source_index": 18,
      "index": 18,
      "doc": " Update `Currency` from `CoinMetadata` if the `MetadataCap` is not claimed. After\n the `MetadataCap` is claimed, updates can only be made through `set_*` functions.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "legacy",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "CoinMetadata",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "delete_migrated_legacy_metadata": {
      "source_index": 19,
      "index": 19,
      "doc": " Delete the legacy `CoinMetadata` object if the metadata cap for the new registry\n has already been claimed.\n\n This function is only callable after there's \"proof\" that the author of the coin\n can manage the metadata using the registry system (so having a metadata cap claimed).",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "legacy",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "CoinMetadata",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "NamedTypeParameter": "T"
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "migrate_regulated_state_by_metadata": {
      "source_index": 20,
      "index": 20,
      "doc": " Allow migrating the regulated state by access to `RegulatedCoinMetadata` frozen object.\n This is a permissionless operation which can be performed only once.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "metadata",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "RegulatedCoinMetadata",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "migrate_regulated_state_by_cap": {
      "source_index": 21,
      "index": 21,
      "doc": " Mark regulated state by showing the `DenyCapV2` object for the `Currency`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "DenyCapV2",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "decimals": {
      "source_index": 22,
      "index": 22,
      "doc": " Get the number of decimal places for the coin type.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u8"
      ]
    },
    "name": {
      "source_index": 23,
      "index": 23,
      "doc": " Get the human-readable name of the coin.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "string"
            },
            "name": "String",
            "type_arguments": []
          }
        }
      ]
    },
    "symbol": {
      "source_index": 24,
      "index": 24,
      "doc": " Get the symbol/ticker of the coin.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "string"
            },
            "name": "String",
            "type_arguments": []
          }
        }
      ]
    },
    "description": {
      "source_index": 25,
      "index": 25,
      "doc": " Get the description of the coin.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "string"
            },
            "name": "String",
            "type_arguments": []
          }
        }
      ]
    },
    "icon_url": {
      "source_index": 26,
      "index": 26,
      "doc": " Get the icon URL for the coin.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "string"
            },
            "name": "String",
            "type_arguments": []
          }
        }
      ]
    },
    "is_metadata_cap_claimed": {
      "source_index": 27,
      "index": 27,
      "doc": " Check if the metadata capability has been claimed for this `Currency` type.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_metadata_cap_deleted": {
      "source_index": 28,
      "index": 28,
      "doc": " Check if the metadata capability has been deleted for this `Currency` type.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "metadata_cap_id": {
      "source_index": 29,
      "index": 29,
      "doc": " Get the metadata cap ID, or none if it has not been claimed.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              {
                "phantom": false,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "object"
                    },
                    "name": "ID",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "treasury_cap_id": {
      "source_index": 30,
      "index": 30,
      "doc": " Get the treasury cap ID for this coin type, if registered.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              {
                "phantom": false,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "object"
                    },
                    "name": "ID",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "deny_cap_id": {
      "source_index": 31,
      "index": 31,
      "doc": " Get the deny cap ID for this coin type, if it's a regulated coin.\n Returns `None` if:\n - The `Currency` is not regulated;\n - The `Currency` is migrated from legacy, and its regulated state has not been set;",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              {
                "phantom": false,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "object"
                    },
                    "name": "ID",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "is_supply_fixed": {
      "source_index": 32,
      "index": 32,
      "doc": " Check if the supply is fixed.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_supply_burn_only": {
      "source_index": 33,
      "index": 33,
      "doc": " Check if the supply is burn-only.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_regulated": {
      "source_index": 34,
      "index": 34,
      "doc": " Check if the currency is regulated.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "total_supply": {
      "source_index": 35,
      "index": 35,
      "doc": " Get the total supply for the `Currency<T>` if the Supply is in fixed or\n burn-only state. Returns `None` if the SupplyState is Unknown.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "currency",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "Currency",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "NamedTypeParameter": "T"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              {
                "phantom": false,
                "argument": "u64"
              }
            ]
          }
        }
      ]
    },
    "exists": {
      "source_index": 36,
      "index": 36,
      "doc": " Check if coin data exists for the given type T in the registry.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": []
        }
      ],
      "parameters": [
        {
          "name": "registry",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin_registry"
                  },
                  "name": "CoinRegistry",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "create": {
      "source_index": 37,
      "index": 37,
      "doc": " Create and share the singleton `CoinRegistry` -- this function is\n called exactly once, during the upgrade epoch.\n Only the system address (0x0) can create the registry.",
      "attributes": [
        {
          "Parameterized": [
            "allow",
            [
              {
                "Name": "unused_function"
              }
            ]
          ]
        }
      ],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "is_ascii_printable": {
      "source_index": 38,
      "index": 18446744073709551615,
      "doc": " Nit: consider adding this function to `std::string` in the future.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "macro_": true,
      "type_parameters": [],
      "parameters": [
        {
          "name": "$s",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "std",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    }
  },
  "structs": {
    "CoinRegistry": {
      "index": 0,
      "doc": " System object found at address `0xc` that stores coin data for all\n registered coin types. This is a shared object that acts as a central\n registry for coin metadata, supply information, and regulatory status.",
      "attributes": [],
      "abilities": [
        "Key"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "ExtraField": {
      "index": 1,
      "doc": " Store only object that enables more flexible coin data\n registration, allowing for additional fields to be added\n without changing the `Currency` structure.",
      "attributes": [
        {
          "Parameterized": [
            "allow",
            [
              {
                "Name": "unused_field"
              }
            ]
          ]
        }
      ],
      "abilities": [
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": true,
        "fields": {
          "pos0": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "type_name"
                },
                "name": "TypeName",
                "type_arguments": []
              }
            }
          },
          "pos1": {
            "index": 1,
            "doc": null,
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "CurrencyKey": {
      "index": 2,
      "doc": " Key used to derive addresses when creating `Currency<T>` objects.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": []
        }
      ],
      "fields": {
        "positional_fields": true,
        "fields": {
          "dummy_field": {
            "index": 0,
            "type_": "bool"
          }
        }
      }
    },
    "MetadataCap": {
      "index": 3,
      "doc": " Capability object that gates metadata (name, description, icon_url, symbol)\n changes in the `Currency`. It can only be created (or claimed) once, and can\n be deleted to prevent changes to the `Currency` metadata.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": []
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "Currency": {
      "index": 4,
      "doc": " Currency stores metadata such as name, symbol, decimals, icon_url and description,\n as well as supply states (optional) and regulatory status.",
      "attributes": [],
      "abilities": [
        "Key"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": []
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "decimals": {
            "index": 1,
            "doc": " Number of decimal places the coin uses for display purposes.",
            "type_": "u8"
          },
          "name": {
            "index": 2,
            "doc": " Human-readable name for the coin.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "string"
                },
                "name": "String",
                "type_arguments": []
              }
            }
          },
          "symbol": {
            "index": 3,
            "doc": " Short symbol/ticker for the coin.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "string"
                },
                "name": "String",
                "type_arguments": []
              }
            }
          },
          "description": {
            "index": 4,
            "doc": " Detailed description of the coin.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "string"
                },
                "name": "String",
                "type_arguments": []
              }
            }
          },
          "icon_url": {
            "index": 5,
            "doc": " URL for the coin's icon/logo.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "string"
                },
                "name": "String",
                "type_arguments": []
              }
            }
          },
          "supply": {
            "index": 6,
            "doc": " Current supply state of the coin (fixed supply or unknown)\n Note: We're using `Option` because `SupplyState` does not have drop,\n meaning we cannot swap out its value at a later state.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "coin_registry"
                        },
                        "name": "SupplyState",
                        "type_arguments": [
                          {
                            "phantom": true,
                            "argument": {
                              "NamedTypeParameter": "T"
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "regulated": {
            "index": 7,
            "doc": " Regulatory status of the coin (regulated with deny cap or unknown)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "coin_registry"
                },
                "name": "RegulatedState",
                "type_arguments": []
              }
            }
          },
          "treasury_cap_id": {
            "index": 8,
            "doc": " ID of the treasury cap for this coin type, if registered.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "metadata_cap_id": {
            "index": 9,
            "doc": " ID of the metadata capability for this coin type, if claimed.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "coin_registry"
                },
                "name": "MetadataCapState",
                "type_arguments": []
              }
            }
          },
          "extra_fields": {
            "index": 10,
            "doc": " Additional fields for extensibility.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "vec_map"
                },
                "name": "VecMap",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "std",
                          "name": "string"
                        },
                        "name": "String",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "coin_registry"
                        },
                        "name": "ExtraField",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "CurrencyInitializer": {
      "index": 5,
      "doc": " Hot potato wrapper to enforce registration after \"new_currency\" data creation.\n Destroyed in the `finalize` call and either transferred to the `CoinRegistry`\n (in case of an OTW registration) or shared directly (for dynamically created\n currencies).",
      "attributes": [],
      "abilities": [],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": []
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "currency": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "coin_registry"
                },
                "name": "Currency",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "NamedTypeParameter": "T"
                    }
                  }
                ]
              }
            }
          },
          "extra_fields": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "bag"
                },
                "name": "Bag",
                "type_arguments": []
              }
            }
          },
          "is_otw": {
            "index": 2,
            "doc": null,
            "type_": "bool"
          }
        }
      }
    }
  },
  "enums": {
    "SupplyState": {
      "index": 0,
      "doc": " Supply state marks the type of Currency Supply, which can be\n - Fixed: no minting or burning;\n - BurnOnly: no minting, burning is allowed;\n - Unknown: flexible (supply is controlled by its `TreasuryCap`);",
      "attributes": [],
      "abilities": [
        "Store"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": []
        }
      ],
      "variants": {
        "Fixed": {
          "index": 0,
          "doc": " Coin has a fixed supply with the given Supply object.",
          "fields": {
            "positional_fields": true,
            "fields": {
              "pos0": {
                "index": 0,
                "doc": null,
                "type_": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "balance"
                    },
                    "name": "Supply",
                    "type_arguments": [
                      {
                        "phantom": true,
                        "argument": {
                          "NamedTypeParameter": "T"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "BurnOnly": {
          "index": 1,
          "doc": " Coin has a supply that can ONLY decrease.",
          "fields": {
            "positional_fields": true,
            "fields": {
              "pos0": {
                "index": 0,
                "doc": null,
                "type_": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "balance"
                    },
                    "name": "Supply",
                    "type_arguments": [
                      {
                        "phantom": true,
                        "argument": {
                          "NamedTypeParameter": "T"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "Unknown": {
          "index": 2,
          "doc": " Supply information is not yet known or registered.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        }
      }
    },
    "RegulatedState": {
      "index": 1,
      "doc": " Regulated state of a coin type.\n - Regulated: `DenyCap` exists or a `RegulatedCoinMetadata` used to mark currency as regulated;\n - Unregulated: the currency was created without deny list;\n - Unknown: the regulatory status is unknown.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "Regulated": {
          "index": 0,
          "doc": " Coin is regulated with a deny cap for address restrictions.\n `allow_global_pause` is `None` if the information is unknown (has not been migrated from `DenyCapV2`).",
          "fields": {
            "positional_fields": false,
            "fields": {
              "cap": {
                "index": 0,
                "doc": null,
                "type_": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "object"
                    },
                    "name": "ID",
                    "type_arguments": []
                  }
                }
              },
              "allow_global_pause": {
                "index": 1,
                "doc": null,
                "type_": {
                  "Datatype": {
                    "module": {
                      "address": "std",
                      "name": "option"
                    },
                    "name": "Option",
                    "type_arguments": [
                      {
                        "phantom": false,
                        "argument": "bool"
                      }
                    ]
                  }
                }
              },
              "variant": {
                "index": 2,
                "doc": null,
                "type_": "u8"
              }
            }
          }
        },
        "Unregulated": {
          "index": 1,
          "doc": " The coin has been created without deny list.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "Unknown": {
          "index": 2,
          "doc": " Regulatory status is unknown.\n Result of a legacy migration for that coin (from `coin.move` constructors)",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        }
      }
    },
    "MetadataCapState": {
      "index": 2,
      "doc": " State of the `MetadataCap` for a single `Currency`.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "Claimed": {
          "index": 0,
          "doc": " The metadata cap has been claimed.",
          "fields": {
            "positional_fields": true,
            "fields": {
              "pos0": {
                "index": 0,
                "doc": null,
                "type_": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "object"
                    },
                    "name": "ID",
                    "type_arguments": []
                  }
                }
              }
            }
          }
        },
        "Unclaimed": {
          "index": 1,
          "doc": " The metadata cap has not been claimed.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "Deleted": {
          "index": 2,
          "doc": " The metadata cap has been claimed and then deleted.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        }
      }
    }
  }
}