// Copyright (c) dWallet Labs, Ltd.
// SPDX-License-Identifier: BSD-3-Clause-Clear

module dwallet_utils::dwallet_utils {
	use ika_dwallet_2pc_mpc::coordinator_inner::DWallet;
	use sui::bcs;

	// === Public Functions ===

	public fun dwallet_public_key_ecdsa_k1_compressed(dwallet: &DWallet): Option<vector<u8>> {
		let dwallet_public_output = dwallet.validate_active_and_get_public_output();
		if (dwallet_public_output[0] == 0) {
			let mut i = 0;
			let mut public_key_bytes = vector[];
			while (i < dwallet_public_output.length()) {
				if (i >= 38 && i <= 70) {
					public_key_bytes.push_back(dwallet_public_output[i]);
				};
				i = i + 1;
			};
			option::some(public_key_bytes)
		} else {
			option::none()
		}
	}

	public fun non_recoverable_ecdsa_k1_signature(dwallet: &DWallet, sign_id: ID): vector<u8> {
		let sign_session = dwallet.get_sign_session(sign_id);
		let mut signature = sign_session.get_sign_signature();

		let mut bcs_bytes = bcs::new(signature.extract());
		let mut r = bcs_bytes.peel_vec_u8();
		let s = bcs_bytes.peel_vec_u8();
		r.append(s);
		r
	}
}

// #[test]
// fun test_a() {
//     let bytes: vector<u8> = vector[0,234,4,33,3,85,92,91,156,215,174,156,22,213,134,119,5,44,119,163,176,234,192,244,93,97,54,194,242,208,97,92,115,132,13,19,66,33,3,222,120,254,231,226,74,235,217,203,146,60,234,35,92,155,26,71,75,202,231,119,163,197,111,158,219,157,202,140,181,142,4,128,2,144,54,58,109,199,18,57,111,244,110,196,222,242,38,176,5,215,92,179,32,152,16,220,167,89,244,71,220,0,146,90,245,173,230,241,135,198,140,29,220,97,88,103,169,65,76,211,236,130,194,84,247,111,145,146,11,49,99,255,35,10,152,223,116,175,216,171,209,3,68,204,171,210,25,147,162,24,2,63,18,120,178,220,11,48,97,23,192,145,42,20,121,133,137,128,95,231,115,152,1,103,253,145,16,152,15,209,101,13,113,239,192,95,46,129,4,2,0,0,0,0,0,0,0,0,0,0,0,177,23,162,20,177,236,193,248,235,249,119,141,73,50,210,36,201,158,247,7,177,205,133,212,175,179,61,17,105,137,201,159,114,167,180,210,200,189,254,58,95,53,192,16,221,236,31,233,224,160,251,58,209,122,18,236,208,133,234,178,116,92,223,194,94,229,160,165,172,106,163,112,183,235,252,182,26,108,100,150,15,12,166,189,76,40,148,61,103,45,161,74,96,2,151,25,45,38,87,206,184,209,168,82,110,233,180,182,49,105,197,48,80,145,165,29,254,255,255,255,255,255,255,255,255,255,255,255,128,2,56,202,146,156,54,17,239,53,188,199,71,65,151,139,81,190,72,211,131,226,133,198,66,159,11,44,132,118,206,212,26,33,168,82,204,179,180,255,29,145,150,154,62,90,98,37,130,132,73,211,58,2,20,130,163,31,8,143,47,139,107,110,154,219,225,222,6,0,182,53,187,37,31,215,94,39,14,21,231,152,77,223,170,181,82,151,2,69,135,132,84,101,178,18,112,229,34,204,162,190,158,67,17,194,95,203,113,41,161,230,192,249,180,218,172,95,1,0,0,0,0,0,0,0,0,0,0,0,79,156,112,101,242,213,186,194,182,207,96,101,82,100,108,141,22,198,112,135,89,223,98,255,167,114,10,106,130,4,98,160,47,118,178,171,60,5,130,216,45,65,159,197,96,159,143,35,155,140,54,101,98,136,13,116,23,173,221,217,172,33,130,205,148,95,28,94,251,114,81,254,0,68,117,58,234,135,148,23,4,122,111,84,113,191,186,236,168,150,254,223,45,147,91,115,77,192,200,74,42,166,226,0,199,57,66,174,245,137,17,139,53,130,249,156,255,255,255,255,255,255,255,255,255,255,255,255,33,2,248,241,81,244,229,180,163,24,132,180,135,85,243,139,12,157,170,96,122,141,56,220,15,190,135,90,185,10,59,166,165,31];

//     let public_key = dwallet_public_key_ecdsa_k1_compressed(&bytes);
//     assert!(public_key.is_some(), 0);
//     let public_key = ecdsa_k1::decompress_pubkey(public_key.borrow());

//     let signature = vector[32,35,226,152,163,30,13,80,43,85,163,108,93,168,242,130,26,185,126,237,20,27,183,34,72,1,48,104,253,112,105,52,243,32,15,20,90,55,183,115,127,71,111,255,79,4,126,169,90,43,153,34,205,62,174,154,143,233,27,29,234,171,183,119,221,248];

//     let non_recoverable_signature = non_recoverable_ecdsa_k1_signature(signature);

//     let msg = vector[104,101,108,108,111,32,119,111,114,108,100];
//     let verified = ecdsa_k1::secp256k1_verify(&non_recoverable_signature, &public_key, &msg, 0);
//     assert!(verified, 1);

//     //let signature = vector[35,226,152,163,30,13,80,43,85,163,108,93,168,242,130,26,185,126,237,20,27,183,34,72,1,48,104,253,112,105,52,243,15,20,90,55,183,115,127,71,111,255,79,4,126,169,90,43,153,34,205,62,174,154,143,233,27,29,234,171,183,119,221,248];
//     // std::debug::print(&signature.length());

//     // let msg = vector[104,101,108,108,111,32,119,111,114,108,100];
//     // let verified = ecdsa_k1::secp256k1_verify(&signature, &public_key, &msg, 0);
//     // assert!(verified, 1);
// }
