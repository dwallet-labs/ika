{
  "doc": " This module provides utilities for validating multiaddr strings in Sui Move.\n Multiaddr is a format for encoding addresses from various well-established network protocols.\n This implementation supports validation for:\n - IPv4 addresses with TCP/UDP\n - IPv6 addresses with TCP/UDP\n - DNS hostnames with TCP/UDP\n - HTTP protocol",
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "string"
    }
  ],
  "attributes": [],
  "functions": {
    "validate_tcp": {
      "source_index": 0,
      "index": 0,
      "doc": " Validates a multiaddr string for TCP with any of IPv4/IPv6/DNS.\n\n # Arguments\n * `addr` - The multiaddr string to validate\n\n # Returns\n * `true` if the multiaddr is valid for TCP, `false` otherwise\n\n # Examples\n ```\n let valid_addr = string::utf8(b\"/ip4/192.168.1.1/tcp/8080\");\n assert!(validate_tcp(&valid_addr));\n ```",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "addr",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "validate_udp": {
      "source_index": 1,
      "index": 1,
      "doc": " Validates a multiaddr string for UDP with any of IPv4/IPv6/DNS.\n\n # Arguments\n * `addr` - The multiaddr string to validate\n\n # Returns\n * `true` if the multiaddr is valid for UDP, `false` otherwise\n\n # Examples\n ```\n let valid_addr = string::utf8(b\"/ip4/192.168.1.1/udp/8080\");\n assert!(validate_udp(&valid_addr));\n ```",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "addr",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "validate_with_transport": {
      "source_index": 2,
      "index": 2,
      "doc": " Internal helper function to validate multiaddr with a specific transport protocol.\n\n # Arguments\n * `addr` - The multiaddr string to validate\n * `transport` - The expected transport protocol (tcp, udp, or quic)\n\n # Returns\n * `true` if the multiaddr is valid for the given transport, `false` otherwise",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "addr",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "transport",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "string"
              },
              "name": "String",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_valid_ipv4": {
      "source_index": 3,
      "index": 3,
      "doc": " Validates an IPv4 address format.\n\n # Arguments\n * `ip` - The IPv4 address string to validate\n\n # Returns\n * `true` if the IPv4 address is valid, `false` otherwise",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ip",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_valid_ipv6": {
      "source_index": 4,
      "index": 4,
      "doc": " Validates an IPv6 address format.\n\n # Arguments\n * `ip` - The IPv6 address string to validate\n\n # Returns\n * `true` if the IPv6 address is valid, `false` otherwise",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ip",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_valid_dns": {
      "source_index": 5,
      "index": 5,
      "doc": " Validates a DNS hostname format.\n\n # Arguments\n * `hostname` - The DNS hostname string to validate\n\n # Returns\n * `true` if the DNS hostname is valid, `false` otherwise",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "hostname",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000001",
                    "name": "string"
                  },
                  "name": "String",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    }
  },
  "structs": {},
  "enums": {}
}