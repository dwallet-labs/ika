{
  "id": {
    "address": "ika_dwallet_2pc_mpc",
    "name": "coordinator_inner"
  },
  "doc": " # dWallet 2PC-MPC Coordinator Inner Module\n\n This module implements the core logic for creating and managing dWallets using\n Multi-Party Computation (MPC) protocols. It provides a trustless and decentralized\n approach to wallet creation and key management through distributed key generation (DKG)\n and threshold signing protocols.\n\n ## Key Features\n - Distributed Key Generation (DKG) for secure key creation\n - Threshold signing with presign optimization\n - Network encryption key management and reconfiguration\n - User encryption key registration and management\n - Session-based MPC protocol coordination\n - Epoch-based validator committee transitions\n - Comprehensive pricing and fee management\n - Support for multiple cryptographic curves and algorithms\n\n ## Architecture\n The module is organized around the `DWalletCoordinatorInner` struct which manages:\n - dWallet lifecycle and state transitions\n - MPC session coordination and scheduling\n - Validator committee management\n - Cryptographic algorithm support and emergency controls\n - Economic incentives through pricing and fee collection",
  "immediate_dependencies": [
    {
      "address": "ika",
      "name": "ika"
    },
    {
      "address": "ika_common",
      "name": "address"
    },
    {
      "address": "ika_common",
      "name": "advance_epoch_approver"
    },
    {
      "address": "ika_common",
      "name": "bls_committee"
    },
    {
      "address": "ika_common",
      "name": "protocol_cap"
    },
    {
      "address": "ika_common",
      "name": "system_current_status_info"
    },
    {
      "address": "ika_common",
      "name": "validator_cap"
    },
    {
      "address": "ika_dwallet_2pc_mpc",
      "name": "pricing"
    },
    {
      "address": "ika_dwallet_2pc_mpc",
      "name": "pricing_and_fee_manager"
    },
    {
      "address": "ika_dwallet_2pc_mpc",
      "name": "sessions_manager"
    },
    {
      "address": "ika_dwallet_2pc_mpc",
      "name": "support_config"
    },
    {
      "address": "std",
      "name": "option"
    },
    {
      "address": "std",
      "name": "vector"
    },
    {
      "address": "sui",
      "name": "bag"
    },
    {
      "address": "sui",
      "name": "balance"
    },
    {
      "address": "sui",
      "name": "bcs"
    },
    {
      "address": "sui",
      "name": "coin"
    },
    {
      "address": "sui",
      "name": "ed25519"
    },
    {
      "address": "sui",
      "name": "event"
    },
    {
      "address": "sui",
      "name": "object"
    },
    {
      "address": "sui",
      "name": "object_table"
    },
    {
      "address": "sui",
      "name": "sui"
    },
    {
      "address": "sui",
      "name": "table"
    },
    {
      "address": "sui",
      "name": "table_vec"
    },
    {
      "address": "sui",
      "name": "tx_context"
    },
    {
      "address": "sui",
      "name": "vec_map"
    }
  ],
  "attributes": [],
  "functions": {
    "create": {
      "source_index": 0,
      "index": 0,
      "doc": " Creates a new DWalletCoordinatorInner instance with initial configuration.\n\n Validates that pricing exists for all supported protocols and curves before creation.\n Initializes all internal data structures with default values.\n\n ### Parameters\n - `current_epoch`: Starting epoch number\n - `active_committee`: Initial validator committee\n - `pricing`: Default pricing configuration\n - `supported_curves_to_signature_algorithms_to_hash_schemes`: Supported cryptographic configurations\n - `ctx`: Transaction context for object creation\n\n ### Returns\n A new DWalletCoordinatorInner instance ready for use",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "advance_epoch_approver",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "advance_epoch_approver"
                  },
                  "name": "AdvanceEpochApprover",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "system_current_status_info",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "system_current_status_info"
                  },
                  "name": "SystemCurrentStatusInfo",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "pricing",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "pricing"
              },
              "name": "PricingInfo",
              "type_arguments": []
            }
          }
        },
        {
          "name": "supported_curves_to_signature_algorithms_to_hash_schemes",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "vec_map"
              },
              "name": "VecMap",
              "type_arguments": [
                {
                  "phantom": false,
                  "argument": "u32"
                },
                {
                  "phantom": false,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "sui",
                        "name": "vec_map"
                      },
                      "name": "VecMap",
                      "type_arguments": [
                        {
                          "phantom": false,
                          "argument": "u32"
                        },
                        {
                          "phantom": false,
                          "argument": {
                            "vector": "u32"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "DWalletCoordinatorInner",
            "type_arguments": []
          }
        }
      ]
    },
    "dwallet_coordinator_witness": {
      "source_index": 1,
      "index": 1,
      "doc": " Get a witness for the coordinator.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "DWalletCoordinatorWitness",
            "type_arguments": []
          }
        }
      ]
    },
    "epoch": {
      "source_index": 2,
      "index": 2,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "request_lock_epoch_sessions": {
      "source_index": 3,
      "index": 3,
      "doc": " Locks the last active session sequence number to prevent further updates.\n\n This function is called before epoch transitions to ensure session scheduling\n stability during the epoch switch process.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n\n ### Effects\n - Prevents further updates to `last_user_initiated_session_to_complete_in_current_epoch`\n - Ensures session completion targets remain stable during epoch transitions",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "system_current_status_info",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "system_current_status_info"
                  },
                  "name": "SystemCurrentStatusInfo",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "register_session_identifier": {
      "source_index": 4,
      "index": 4,
      "doc": " Registers a new session identifier.\n\n This function is used to register a new session identifier.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator.\n - `identifier_preimage`: The preimage bytes for creating the session identifier.\n - `ctx`: Transaction context for object creation.\n\n ### Returns\n A new session identifier object.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "identifier_preimage",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "sessions_manager"
            },
            "name": "SessionIdentifier",
            "type_arguments": []
          }
        }
      ]
    },
    "request_dwallet_network_encryption_key_dkg": {
      "source_index": 5,
      "index": 5,
      "doc": " Starts a Distributed Key Generation (DKG) session for the network (threshold) encryption key.\n\n Creates a new network encryption key and initiates the DKG process through the validator network.\n Returns a capability that grants control over the created encryption key.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `ctx`: Transaction context for object creation",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "params_for_network",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "protocol_cap"
                  },
                  "name": "VerifiedProtocolCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "respond_dwallet_network_encryption_key_dkg": {
      "source_index": 6,
      "index": 6,
      "doc": " Complete the Distributed Key Generation (DKG) session\n and store the public output corresponding to the newly created network (threshold) encryption key.\n\n Note: assumes the public output is divided into chunks and each `network_public_output_chunk` is delivered in order,\n with `is_last_chunk` set for the last call.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "network_public_output_chunk",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "supported_curves",
          "type_": {
            "vector": "u32"
          }
        },
        {
          "name": "is_last_chunk",
          "type_": "bool"
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "respond_dwallet_network_encryption_key_reconfiguration": {
      "source_index": 7,
      "index": 7,
      "doc": " Complete the Reconfiguration session\n and store the public output corresponding to the reconfigured network (threshold) encryption key.\n\n Note: assumes the public output is divided into chunks and each `network_public_output_chunk` is delivered in order,\n with `is_last_chunk` set for the last call.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "public_output",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "supported_curves",
          "type_": {
            "vector": "u32"
          }
        },
        {
          "name": "is_last_chunk",
          "type_": "bool"
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "initiate_mid_epoch_reconfiguration": {
      "source_index": 8,
      "index": 8,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "system_current_status_info",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "system_current_status_info"
                  },
                  "name": "SystemCurrentStatusInfo",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "request_network_encryption_key_mid_epoch_reconfiguration": {
      "source_index": 9,
      "index": 9,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "calculate_pricing_votes": {
      "source_index": 10,
      "index": 10,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        },
        {
          "name": "signature_algorithm",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "option"
              },
              "name": "Option",
              "type_arguments": [
                {
                  "phantom": false,
                  "argument": "u32"
                }
              ]
            }
          }
        },
        {
          "name": "protocol",
          "type_": "u32"
        }
      ],
      "return_": []
    },
    "get_active_dwallet_network_encryption_key": {
      "source_index": 11,
      "index": 11,
      "doc": null,
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWalletNetworkEncryptionKey",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "advance_epoch": {
      "source_index": 12,
      "index": 12,
      "doc": " Advances the coordinator to the next epoch with comprehensive state transitions.\n\n Performs a complete epoch transition including session management updates,\n committee transitions, and network encryption key advancement. This is a\n critical operation that must be executed atomically.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `next_committee`: New validator committee for the upcoming epoch\n - `dwallet_network_encryption_key_caps`: Capabilities for network encryption keys to advance\n\n ### Returns\n Combined IKA balance from fees collected during the epoch\n\n ### Effects\n - Validates all current epoch sessions are completed\n - Updates session management metadata for the next epoch\n - Transitions validator committees (current -> previous, next -> current)\n - Advances network encryption key epochs\n - Unlocks session sequence number management\n - Increments the current epoch counter\n - Collects and returns accumulated fees\n\n ### Aborts\n - `EPricingCalculationVotesMustBeCompleted`: If pricing votes are still in progress\n - `ECannotAdvanceEpoch`: If not all current epoch sessions are completed\n - Various network encryption key related errors from capability validation",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "advance_epoch_approver",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "advance_epoch_approver"
                  },
                  "name": "AdvanceEpochApprover",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "has_dwallet": {
      "source_index": 13,
      "index": 13,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "get_dwallet": {
      "source_index": 14,
      "index": 14,
      "doc": " Gets an immutable reference to a dWallet by ID.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `dwallet_id`: ID of the dWallet to retrieve\n\n ### Returns\n Immutable reference to the dWallet\n\n ### Aborts\n - `EDWalletNotExists`: If the dWallet doesn't exist",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWallet",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "get_dwallet_mut": {
      "source_index": 15,
      "index": 15,
      "doc": " Gets a mutable reference to a dWallet by ID.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_id`: ID of the dWallet to retrieve\n\n ### Returns\n Mutable reference to the dWallet\n\n ### Aborts\n - `EDWalletNotExists`: If the dWallet doesn't exist",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWallet",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "get_active_dwallet_and_public_output": {
      "source_index": 16,
      "index": 16,
      "doc": " Retrieves an active dWallet and its public output for read-only operations.\n\n This helper function safely accesses a dWallet ensuring it exists and is in\n an active state suitable for cryptographic operations. The public output\n represents the cryptographic public key material.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `dwallet_id`: Unique identifier of the target dWallet\n\n ### Returns\n A tuple containing:\n - Reference to the validated dWallet object\n - Copy of the public output (cryptographic public key data)\n\n ### Validation Performed\n - Confirms dWallet exists in the coordinator's registry\n - Validates dWallet is in `Active` state (DKG completed)\n - Ensures public output is available for cryptographic operations\n\n ### Aborts\n - `EDWalletNotExists`: If the dWallet ID is not found\n - `EDWalletNotActive`: If the dWallet is not in active state",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWallet",
                "type_arguments": []
              }
            }
          ]
        },
        {
          "vector": "u8"
        }
      ]
    },
    "get_active_dwallet_and_public_output_mut": {
      "source_index": 17,
      "index": 17,
      "doc": " Retrieves an active dWallet and its public output for mutable operations.\n\n Similar to `get_active_dwallet_and_public_output` but returns a mutable reference\n to the dWallet for operations that need to modify the dWallet state, such as\n updating session counts or state transitions.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_id`: Unique identifier of the target dWallet\n\n ### Returns\n A tuple containing:\n - Mutable reference to the validated dWallet object\n - Copy of the public output (cryptographic public key data)\n\n ### Common Use Cases\n - Updating presign session counters\n - Modifying dWallet state during operations\n - Recording operational history or metrics\n - Managing active session associations\n\n ### Validation Performed\n - Confirms dWallet exists in the coordinator's registry\n - Validates dWallet is in `Active` state (DKG completed)\n - Ensures public output is available for cryptographic operations\n\n ### Aborts\n - `EDWalletNotExists`: If the dWallet ID is not found\n - `EDWalletNotActive`: If the dWallet is not in active state",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWallet",
                "type_arguments": []
              }
            }
          ]
        },
        {
          "vector": "u8"
        }
      ]
    },
    "get_active_encryption_key": {
      "source_index": 18,
      "index": 18,
      "doc": " Get the active encryption key ID by its address.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "address",
          "type_": "address"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "validate_network_encryption_key_supports_curve": {
      "source_index": 19,
      "index": 19,
      "doc": " Validates that a curve is supported by the network encryption key.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `dwallet_network_encryption_key_id`: ID of the network encryption key to validate\n - `curve`: Curve identifier to validate\n\n ### Aborts\n - `EDWalletNetworkEncryptionKeyNotExist`: If the network encryption key doesn't exist\n - `ENetworkEncryptionKeyUnsupportedCurve`: If the curve is not supported by the network encryption key",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        }
      ],
      "return_": []
    },
    "register_encryption_key": {
      "source_index": 20,
      "index": 20,
      "doc": " Registers an encryption key for secure dWallet share storage.\n\n Creates and validates a new encryption key that can be used to encrypt\n centralized secret key shares. The key signature is verified before registration.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `curve`: Cryptographic curve for the encryption key\n - `encryption_key`: Serialized encryption key data\n - `encryption_key_signature`: Ed25519 signature of the encryption key\n - `signer_public_key`: Public key used to create the signature\n - `ctx`: Transaction context for object creation\n\n ### Effects\n - Creates a new `EncryptionKey` object\n - Emits a `CreatedEncryptionKeyEvent`\n\n ### Aborts\n - `EInvalidCurve`: If the curve is not supported\n - `ECurvePaused`: If the curve is currently paused\n - `EInvalidEncryptionKeySignature`: If the signature verification fails",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        },
        {
          "name": "encryption_key",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encryption_key_signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "signer_public_key",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "approve_message": {
      "source_index": 21,
      "index": 21,
      "doc": " Approves a message for signing by a dWallet.\n\n Creates a message approval that authorizes the specified message to be signed\n using the given signature algorithm and hash scheme. This approval can later\n be used to initiate a signing session.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `dwallet_cap`: Capability proving control over the dWallet\n - `signature_algorithm`: Algorithm to use for signing\n - `hash_scheme`: Hash scheme to apply to the message\n - `message`: Raw message bytes to be signed\n\n ### Returns\n A `MessageApproval` that can be used to request signing\n\n ### Aborts\n - `EImportedKeyDWallet`: If this is an imported key dWallet (use `approve_imported_key_message` instead)\n - `EDWalletNotExists`: If the dWallet doesn't exist\n - `EDWalletInactive`: If the dWallet is not in active state\n - Various validation errors for unsupported/paused algorithms",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "hash_scheme",
          "type_": "u32"
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "MessageApproval",
            "type_arguments": []
          }
        }
      ]
    },
    "approve_imported_key_message": {
      "source_index": 22,
      "index": 22,
      "doc": " Approves a message for signing by an imported key dWallet.\n\n Creates a message approval that authorizes the specified message to be signed\n using the given signature algorithm and hash scheme. This approval can later\n be used to initiate a signing session.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `imported_key_dwallet_cap`: Capability proving control over the dWallet\n - `signature_algorithm`: Algorithm to use for signing\n - `hash_scheme`: Hash scheme to apply to the message\n - `message`: Raw message bytes to be signed\n\n ### Returns\n A `ImportedKeyMessageApproval` that can be used to request signing\n\n ### Aborts\n - `ENotImportedKeyDWallet`: If this is not an imported key dWallet (use `approve_message` instead)\n - `EDWalletNotExists`: If the dWallet doesn't exist\n - `EDWalletInactive`: If the dWallet is not in active state\n - Various validation errors for unsupported/paused algorithms",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "imported_key_dwallet_cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "ImportedKeyDWalletCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "hash_scheme",
          "type_": "u32"
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "ImportedKeyMessageApproval",
            "type_arguments": []
          }
        }
      ]
    },
    "validate_approve_message": {
      "source_index": 23,
      "index": 23,
      "doc": " Perform shared validation for both the dWallet and imported key dWallet's variants of `approve_message()`.\n Verify the `curve`, `signature_algorithm` and `hash_scheme` choice, and that the dWallet exists.\n Returns whether this is an imported key dWallet, to be verified by the caller.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "hash_scheme",
          "type_": "u32"
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "request_dwallet_dkg": {
      "source_index": 24,
      "index": 24,
      "doc": " Initiates the second round of Distributed Key Generation (DKG) with encrypted user shares.\n\n This function represents the user's contribution to the DKG second round, where they\n provide their encrypted secret share and request validator network verification.\n It creates the encrypted share object and transitions the dWallet to network verification.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_cap`: User's capability proving dWallet ownership\n - `centralized_public_key_share_and_proof`: User's public key contribution with ZK proof\n - `encrypted_centralized_secret_share_and_proof`: User's encrypted secret share with proof\n - `encryption_key_address`: Address of the encryption key for securing the share\n - `user_public_output`: User's contribution to the final public key\n - `signer_public_key`: Ed25519 key for signature verification\n - `payment_ika`: User's IKA payment for computation\n - `payment_sui`: User's SUI payment for gas reimbursement\n - `ctx`: Transaction context\n\n ### DKG Second Round Process\n 1. **Validation**: Verifies encryption key compatibility and dWallet state\n 2. **Share Creation**: Creates `EncryptedUserSecretKeyShare` with verification pending\n 3. **Payment Processing**: Charges user for validator computation and consensus\n 4. **Event Emission**: Requests validator network to verify encrypted share\n 5. **State Transition**: Updates dWallet to `AwaitingNetworkDKGVerification`\n\n ### Cryptographic Security\n - **Zero-Knowledge Proofs**: User provides proofs of correct share encryption\n - **Encryption Key Validation**: Ensures proper key curve compatibility\n - **Share Verification**: Network will validate encrypted share correctness\n - **Threshold Security**: Maintains distributed key generation properties\n\n ### Network Integration\n Emits `DWalletDKGSecondRoundRequestEvent` for validator processing,\n triggering network verification of the encrypted share.\n\n ### Aborts\n - `EImportedKeyDWallet`: If called on imported key dWallet\n - `EMismatchCurve`: If encryption key curve doesn't match dWallet curve\n - `EWrongState`: If dWallet not in correct state for second round\n - Various validation and payment errors",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        },
        {
          "name": "centralized_public_key_share_and_proof",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encrypted_centralized_secret_share_and_proof",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encryption_key_address",
          "type_": "address"
        },
        {
          "name": "user_public_output",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "signer_public_key",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "DWalletCap",
            "type_arguments": []
          }
        }
      ]
    },
    "respond_dwallet_dkg": {
      "source_index": 25,
      "index": 25,
      "doc": " This function is called by the Ika network to respond to the dWallet DKG second round request made by the user.\n\n Completes the second round of the Distributed Key Generation (DKG) process and\n advances the [`DWallet`] state to `AwaitingKeyHolderSignature` with the DKG public output registered in it.\n\n Advances the `EncryptedUserSecretKeyShareState` to `NetworkVerificationCompleted`.\n\n Also emits an event with the public output.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "public_output",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encrypted_user_secret_key_share_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "request_re_encrypt_user_share_for": {
      "source_index": 26,
      "index": 26,
      "doc": " Requests a re-encryption of the user share of the dWallet by having the Ika network\n verify a zk-proof that the encryption matches the public share of the dWallet.\n\n This can be used as part of granting access or transferring the dWallet.\n\n Creates a new `EncryptedUserSecretKeyShare` object, with the state awaiting the network verification.\n Emits an event to request the verification by the network.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "destination_encryption_key_address",
          "type_": "address"
        },
        {
          "name": "encrypted_centralized_secret_share_and_proof",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "source_encrypted_user_secret_key_share_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "respond_re_encrypt_user_share_for": {
      "source_index": 27,
      "index": 27,
      "doc": " This function is called by the Ika network to respond to a re-encryption request of the user share of the dWallet\n by setting the `EncryptedUserSecretKeyShareState` object's state according to the verification result.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "encrypted_user_secret_key_share_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "accept_encrypted_user_share": {
      "source_index": 28,
      "index": 28,
      "doc": " Accept the encryption of the user share of a dWallet.\n\n Called after the user verified the signature of the sender (who re-encrypted the user share for them)\n on the public output of the dWallet, and that the decrypted share matches the public key share of the dWallet.\n\n Register the user's own signature on the public output `user_output_signature` for an easy way to perform self-verification in the future.\n\n Finalizes the `EncryptedUserSecretKeyShareState` object's state as `KeyHolderSigned`.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "encrypted_user_secret_key_share_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "user_output_signature",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": []
    },
    "request_imported_key_dwallet_verification": {
      "source_index": 29,
      "index": 29,
      "doc": " Request verification of the imported key dWallet from the Ika network.\n\n ### Parameters\n - `dwallet_network_encryption_key_id`: The ID of the network encryption key to use for the dWallet.\n - `curve`: The curve of the dWallet.\n - `centralized_party_message`: The message from the centralized party.\n - `encrypted_centralized_secret_share_and_proof`: The encrypted centralized secret share and proof.\n - `encryption_key_address`: The address of the encryption key.\n - `user_public_output`: The public output of the user.\n - `signer_public_key`: The public key of the signer.\n - `session_identifier_preimage`: The session identifier.\n - `payment_ika`: The IKA payment for the operation.\n - `payment_sui`: The SUI payment for the operation.\n - `ctx`: The transaction context.\n\n ### Returns\n - `ImportedKeyDWalletCap`: The cap of the imported key dWallet.\n\n ### Aborts\n - `EDWalletNetworkEncryptionKeyNotExist`: If the network encryption key does not exist.\n - `EMismatchCurve`: If the curve does not match the dWallet curve.\n - `EInvalidEncryptionKeySignature`: If the encryption key signature is invalid.\n - `EInvalidUserPublicOutput`: If the user public output is invalid.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        },
        {
          "name": "centralized_party_message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encrypted_centralized_secret_share_and_proof",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encryption_key_address",
          "type_": "address"
        },
        {
          "name": "user_public_output",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "signer_public_key",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "ImportedKeyDWalletCap",
            "type_arguments": []
          }
        }
      ]
    },
    "respond_imported_key_dwallet_verification": {
      "source_index": 30,
      "index": 30,
      "doc": " This function is called by the Ika network to respond to the import key dWallet verification request made by the user.\n\n Completes the verification of an imported key dWallet and\n advances the [`DWallet`] state to `AwaitingKeyHolderSignature` with the DKG public output registered in it.\n Also emits an event with the public output.\n\n Advances the `EncryptedUserSecretKeyShareState` to `NetworkVerificationCompleted`.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "public_output",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "encrypted_user_secret_key_share_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "request_make_dwallet_user_secret_key_share_public": {
      "source_index": 31,
      "index": 31,
      "doc": " Requests to make the user secret key shares of a dWallet public.\n *IMPORTANT*: If you make the dWallet user secret key shares public, you remove\n the zero trust security of the dWallet and you can't revert it.\n\n This function emits a `MakeDWalletUserSecretKeySharePublicRequestEvent` event to initiate the\n process of making the user secret key shares of a dWallet public. It charges the initiator for\n the operation and creates a new event to record the request.\n\n ### Parameters\n - `dwallet_id`: The ID of the dWallet to make the user secret key shares public.\n - `public_user_secret_key_share`: The public user secret key shares to be made public.\n - `payment_ika`: The IKA payment for the operation.\n - `payment_sui`: The SUI payment for the operation.\n - `ctx`: The transaction context.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "public_user_secret_key_share",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "respond_make_dwallet_user_secret_key_share_public": {
      "source_index": 32,
      "index": 32,
      "doc": " This function is called by the Ika network to respond to the request to make the dWallet's user share public.\n Sets `public_user_secret_key_share` to the verified value.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "public_user_secret_key_share",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "request_presign": {
      "source_index": 33,
      "index": 33,
      "doc": " Requests generation of a dWallet-specific presign for accelerated signing.\n\n Presigns are precomputed cryptographic material that dramatically reduce online\n signing latency from seconds to milliseconds. This function creates a dWallet-specific\n presign that can only be used with the specified dWallet.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_id`: Target dWallet for the presign generation\n - `signature_algorithm`: Algorithm requiring presign material (e.g., ECDSA)\n - `payment_ika`: User's IKA payment for computation\n - `payment_sui`: User's SUI payment for gas reimbursement\n - `ctx`: Transaction context\n\n ### Returns\n `UnverifiedPresignCap` that must be verified before use in signing\n\n\n ### Security Properties\n - **Single Use**: Each presign can only be consumed once\n - **Cryptographic Binding**: Tied to specific dWallet public key\n - **Validator Consensus**: Generated through secure MPC protocol\n - **Expiration**: Presigns have limited validity period\n\n ### Next Steps\n 1. Wait for validator network to process the presign request\n 2. Call `is_presign_valid()` to check completion status\n 3. Use `verify_presign_cap()` to convert to verified capability\n 4. Combine with message approval for actual signing\n\n ### Aborts\n - `EInvalidSignatureAlgorithm`: If the signature algorithm is not allowed for dWallet-specific presigns\n - `EInvalidCurve`: If the curve is not supported\n - `EInvalidNetworkEncryptionKey`: If the network encryption key is not supported\n - `EInsufficientFunds`: If the user does not have enough funds to pay for the presign",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "UnverifiedPresignCap",
            "type_arguments": []
          }
        }
      ]
    },
    "request_global_presign": {
      "source_index": 34,
      "index": 34,
      "doc": " Requests generation of a global presign for flexible cross-dWallet use.\n\n Global presigns provide computational efficiency by creating precomputed material\n that can be used with any compatible dWallet under the same network encryption key.\n This enables better resource utilization and batch processing optimization.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_network_encryption_key_id`: Network encryption key for presign compatibility\n - `curve`: Cryptographic curve for presign generation\n - `signature_algorithm`: Algorithm requiring presign material\n - `payment_ika`: User's IKA payment for computation\n - `payment_sui`: User's SUI payment for gas reimbursement\n - `ctx`: Transaction context\n\n ### Returns\n `UnverifiedPresignCap` that can be used with any compatible dWallet\n\n ### Security Considerations\n - Global presigns maintain cryptographic security properties\n - Network encryption key provides isolation between key epochs\n - Validator consensus ensures presign authenticity\n - Single-use property prevents replay attacks\n\n ### Next Steps\n 1. Wait for validator network to process the global presign request\n 2. Verify presign completion using `is_presign_valid()`\n 3. Convert to `VerifiedPresignCap` with `verify_presign_cap()`\n 4. Use with any compatible dWallet for signing operations\n\n ### Aborts\n - `EInvalidSignatureAlgorithm`: If the signature algorithm is not allowed for global presigns\n - `EInvalidCurve`: If the curve is not supported\n - `EInvalidNetworkEncryptionKey`: If the network encryption key is not supported\n - `EInsufficientFunds`: If the user does not have enough funds to pay for the presign",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "curve",
          "type_": "u32"
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "UnverifiedPresignCap",
            "type_arguments": []
          }
        }
      ]
    },
    "respond_presign": {
      "source_index": 35,
      "index": 35,
      "doc": " Processes validator network response to presign generation request.\n\n This function handles the completion or rejection of presign generation by the\n validator network, updating the presign session state and emitting appropriate events.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `dwallet_id`: Target dWallet ID for dWallet-specific presigns (None for global)\n - `presign_id`: Unique identifier of the presign session\n - `session_id`: MPC session ID that processed the presign\n - `presign`: Generated cryptographic presign material (if successful)\n - `rejected`: Whether the validator network rejected the presign request\n - `session_sequence_number`: Session sequence for fee processing\n\n ### Returns\n Gas reimbursement balance for user refund\n\n ### Success Path\n - **State Transition**: `Requested` → `Completed`\n - **Presign Storage**: Cryptographic material is stored in session\n - **Event**: `CompletedPresignEvent` with presign data\n - **Capability**: Associated capability can now be verified and used\n\n ### Rejection Path\n - **State Transition**: `Requested` → `NetworkRejected`\n - **Event**: `RejectedPresignEvent` indicating failure\n - **Capability**: Associated capability becomes unusable\n - **Common Causes**: Insufficient validator participation, computation errors\n\n\n ### Security Properties\n - Presign material is cryptographically secure and verifiable\n - Single-use property enforced through session consumption\n - Validator consensus ensures authenticity of generated material\n - Rejection handling prevents use of incomplete presigns\n\n ### Network Integration\n This function is exclusively called by the Ika validator network as part\n of the distributed presign generation protocol.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "std",
                "name": "option"
              },
              "name": "Option",
              "type_arguments": [
                {
                  "phantom": false,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "sui",
                        "name": "object"
                      },
                      "name": "ID",
                      "type_arguments": []
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "presign_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "presign",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "is_presign_valid": {
      "source_index": 36,
      "index": 36,
      "doc": " Validates that a presign capability corresponds to a completed presign session.\n\n Checks both the completion state and capability ID matching to ensure\n the capability is authentic and the presign is ready for use.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `cap`: Unverified presign capability to validate\n\n ### Returns\n `true` if the presign is completed and the capability is valid, `false` otherwise\n\n ### Validation Criteria\n - Presign session must be in `Completed` state\n - Capability ID must match the session's recorded capability ID\n - Presign session must exist in the coordinator",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "UnverifiedPresignCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "verify_presign_cap": {
      "source_index": 37,
      "index": 37,
      "doc": " Verify `cap` by deleting the `UnverifiedPresignCap` object and replacing it with a new `VerifiedPresignCap`,\n if `is_presign_valid()`.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "UnverifiedPresignCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "VerifiedPresignCap",
            "type_arguments": []
          }
        }
      ]
    },
    "validate_and_initiate_sign": {
      "source_index": 38,
      "index": 38,
      "doc": " This function is a shared logic for both the standard and future sign flows.\n\n It checks the presign is valid and deletes it (and its `presign_cap`), thus assuring it is not used twice.\n\n Creates a `SignSession` object and register it in `sign_sessions`.\n\n Finally it emits the sign event.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "pricing_value",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "pricing"
              },
              "name": "PricingInfoValue",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "signature_algorithm",
          "type_": "u32"
        },
        {
          "name": "hash_scheme",
          "type_": "u32"
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "presign_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPresignCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_centralized_signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "is_future_sign",
          "type_": "bool"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        },
        "bool"
      ]
    },
    "request_sign": {
      "source_index": 39,
      "index": 39,
      "doc": " Initiates the Sign protocol for this dWallet.\n Requires a `MessageApproval`, which approves a message for signing and is unpacked and deleted to ensure it is never used twice.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "presign_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPresignCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "MessageApproval",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_centralized_signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "request_imported_key_sign": {
      "source_index": 40,
      "index": 40,
      "doc": " Initiates the Sign protocol for this imported key dWallet.\n Requires an `ImportedKeyMessageApproval`, which approves a message for signing and is unpacked and deleted to ensure it is never used twice.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "presign_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPresignCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "ImportedKeyMessageApproval",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_centralized_signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "request_future_sign": {
      "source_index": 41,
      "index": 41,
      "doc": " Request the Ika network verify the user-side sign protocol (in other words, that `message` is partially signed by the user),\n without (yet) executing the network side sign-protocol.\n\n Used for future sign use-cases, in which the user share isn't required to sign `message`;\n instead, anyone that holds a `VerifiedPartialUserSignatureCap` capability and a `MessageApproval` can sign `message` by calling `request_sign_with_partial_user_signature()` at any time.\n\n Creates a new `PartialUserSignature` in the `AwaitingNetworkVerification` state and registered it into `partial_centralized_signed_messages`. Moves `presign_cap` to it,\n ensuring it can be used for anything other than signing this `message` using `request_sign_with_partial_user_signature()` (which will in turn ensure it can only be signed once).\n\n Creates a new `UnverifiedPartialUserSignatureCap` object and returns it to the caller.\n\n See the doc of [`PartialUserSignature`] for\n more details on when this may be used.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "presign_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPresignCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "hash_scheme",
          "type_": "u32"
        },
        {
          "name": "message_centralized_signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "UnverifiedPartialUserSignatureCap",
            "type_arguments": []
          }
        }
      ]
    },
    "respond_future_sign": {
      "source_index": 42,
      "index": 42,
      "doc": " Called by the Ika network to respond with the verification result of the user-side sign protocol (in other words, whether `message` is partially signed by the user).\n\n Advances the `PartialUserSignature` state to `NetworkVerificationCompleted`.\n\n See the doc of [`PartialUserSignature`] for\n more details on when this may be used.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "partial_centralized_signed_message_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "is_partial_user_signature_valid": {
      "source_index": 43,
      "index": 43,
      "doc": " Checks that the partial user signature corresponding to `cap` is valid, by assuring it is in the `NetworkVerificationCompleted` state.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "UnverifiedPartialUserSignatureCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "verify_partial_user_signature_cap": {
      "source_index": 44,
      "index": 44,
      "doc": " Verifies that the partial user signature corresponding to `cap` is valid,\n deleting the `UnverifiedPartialUserSignatureCap` object and returning a new `VerifiedPartialUserSignatureCap` in its place.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "UnverifiedPartialUserSignatureCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "coordinator_inner"
            },
            "name": "VerifiedPartialUserSignatureCap",
            "type_arguments": []
          }
        }
      ]
    },
    "request_sign_with_partial_user_signature": {
      "source_index": 45,
      "index": 45,
      "doc": " Requests the Ika network to complete the signing session on a message that was already partially-signed by the user (i.e. a message with a verified [`PartialUserSignature`]).\n Useful is `message_approval` was only acquired after `PartialUserSignature` was created, and the caller does not own the user-share of this dWallet.\n\n Takes the `presign_cap` from the `PartialUserSignature` object, and destroys it in `validate_and_initiate_sign()`,\n ensuring the presign was not used for any other purpose than signing this message once.\n\n See the doc of [`PartialUserSignature`] for\n more details on when this may be used.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "partial_user_signature_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPartialUserSignatureCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "MessageApproval",
              "type_arguments": []
            }
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "request_imported_key_sign_with_partial_user_signature": {
      "source_index": 46,
      "index": 46,
      "doc": " The imported key variant of [`request_sign_with_partial_user_signature()`] (see for documentation).",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "partial_user_signature_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "VerifiedPartialUserSignatureCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "coordinator_inner"
              },
              "name": "ImportedKeyMessageApproval",
              "type_arguments": []
            }
          }
        },
        {
          "name": "session_identifier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "sessions_manager"
              },
              "name": "SessionIdentifier",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment_ika",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "ika",
                            "name": "ika"
                          },
                          "name": "IKA",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "payment_sui",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "coin"
                  },
                  "name": "Coin",
                  "type_arguments": [
                    {
                      "phantom": true,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "sui"
                          },
                          "name": "SUI",
                          "type_arguments": []
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "match_partial_user_signature_with_message_approval": {
      "source_index": 47,
      "index": 47,
      "doc": " Matches partial user signature with message approval to ensure they are consistent.\n This function can be called by the user to verify before calling\n the `request_sign_with_partial_user_signature` function.\n It is also called before requesting the Ika network to complete the signing.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "partial_user_signature_cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "VerifiedPartialUserSignatureCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "MessageApproval",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "match_partial_user_signature_with_imported_key_message_approval": {
      "source_index": 48,
      "index": 48,
      "doc": " Matches partial user signature with imported key message approval to ensure they are consistent.\n This function can be called by the user to verify before calling\n the `request_imported_key_sign_with_partial_user_signatures` function.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "partial_user_signature_cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "VerifiedPartialUserSignatureCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "message_approval",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "ImportedKeyMessageApproval",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "respond_sign": {
      "source_index": 49,
      "index": 49,
      "doc": " Called by the Ika network to respond to (and complete) a Sign protocol request.\n\n Sets the `SignSession` to `Completed` and stores in it the `signature`.\n Also emits an event with the `signature`.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "sign_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "is_future_sign",
          "type_": "bool"
        },
        {
          "name": "rejected",
          "type_": "bool"
        },
        {
          "name": "session_sequence_number",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "process_checkpoint_message_by_quorum": {
      "source_index": 50,
      "index": 50,
      "doc": " Processes a checkpoint message that has been signed by a validator quorum.\n\n Verifies the BLS multi-signature from the active validator committee before\n processing the checkpoint contents. This ensures only valid, consensus-approved\n checkpoints are processed.\n\n ### Parameters\n - `self`: Mutable reference to the coordinator\n - `signature`: BLS multi-signature from validators\n - `signers_bitmap`: Bitmap indicating which validators signed\n - `message`: Checkpoint message content to process\n - `ctx`: Transaction context for coin creation\n\n ### Returns\n SUI coin containing gas fee reimbursements from processed operations\n\n ### Effects\n - Verifies the signature against the active committee\n - Processes all operations contained in the checkpoint\n - Updates session states and emits relevant events\n - Collects and returns gas fee reimbursements\n\n ### Aborts\n - BLS verification errors if signature is invalid\n - Various operation-specific errors during checkpoint processing",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "signature",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "signers_bitmap",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "Coin",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "process_checkpoint_message": {
      "source_index": 51,
      "index": 51,
      "doc": null,
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "Coin",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "set_max_active_sessions_buffer": {
      "source_index": 52,
      "index": 52,
      "doc": null,
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "max_active_sessions_buffer",
          "type_": "u64"
        }
      ],
      "return_": []
    },
    "set_gas_fee_reimbursement_sui_system_call_value": {
      "source_index": 53,
      "index": 53,
      "doc": null,
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "gas_fee_reimbursement_sui_system_call_value",
          "type_": "u64"
        }
      ],
      "return_": []
    },
    "process_checkpoint_message_by_cap": {
      "source_index": 54,
      "index": 54,
      "doc": " This function is used to process a checkpoint message by cap.\n\n ### Parameters\n - **`message`**: The message to process.\n - **`cap`**: The capability to use to process the message.\n\n ### Returns\n The coin of SUI that was charged for the gas fee reimbursement system call.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "message",
          "type_": {
            "vector": "u8"
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "protocol_cap"
                  },
                  "name": "VerifiedProtocolCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "coin"
            },
            "name": "Coin",
            "type_arguments": [
              {
                "phantom": true,
                "argument": {
                  "Datatype": {
                    "module": {
                      "address": "sui",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "set_gas_fee_reimbursement_sui_system_call_value_by_cap": {
      "source_index": 55,
      "index": 55,
      "doc": " Sets the gas fee reimbursement SUI system call value.\n\n ### Parameters\n - **`gas_fee_reimbursement_sui_system_call_value`**: The gas fee reimbursement SUI system call value.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "gas_fee_reimbursement_sui_system_call_value",
          "type_": "u64"
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "protocol_cap"
                  },
                  "name": "VerifiedProtocolCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "set_supported_and_pricing": {
      "source_index": 56,
      "index": 56,
      "doc": " Sets the supported curves, signature algorithms and hash schemes, and the default pricing.\n\n This function is used to set the supported curves, signature algorithms and hash schemes, and the default pricing.\n Default pricing is used to set the pricing for a protocol or curve if pricing is missing for a protocol or curve\n and it has to contain the default pricing for all protocols and curves as set in the `supported_curves_to_signature_algorithms_to_hash_schemes` parameter.\n\n ### Parameters\n - **`default_pricing`**: The default pricing to use if pricing is missing for a protocol or curve.\n - **`supported_curves_to_signature_algorithms_to_hash_schemes`**: A map of curves to signature algorithms to hash schemes.\n\n ### Errors\n - **`EMissingProtocolPricing`**: If pricing is missing for any protocol or curve.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "default_pricing",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "pricing"
              },
              "name": "PricingInfo",
              "type_arguments": []
            }
          }
        },
        {
          "name": "supported_curves_to_signature_algorithms_to_hash_schemes",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "vec_map"
              },
              "name": "VecMap",
              "type_arguments": [
                {
                  "phantom": false,
                  "argument": "u32"
                },
                {
                  "phantom": false,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "sui",
                        "name": "vec_map"
                      },
                      "name": "VecMap",
                      "type_arguments": [
                        {
                          "phantom": false,
                          "argument": "u32"
                        },
                        {
                          "phantom": false,
                          "argument": {
                            "vector": "u32"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "protocol_cap"
                  },
                  "name": "VerifiedProtocolCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "verify_pricing_exists_for_all_protocols": {
      "source_index": 57,
      "index": 57,
      "doc": " Verifies that pricing exists for all protocols for all curves.\n Aborts if pricing is missing for any protocol or curve.\n IMPORTANT: every time a new protocol is added, this function must be updated with verifying the new protocol pricing.\n\n ### Parameters\n - **`supported_curves_to_signature_algorithms_to_hash_schemes`**: A map of curves to signature algorithms to hash schemes.\n - **`default_pricing`**: The default pricing to use if pricing is missing for a protocol or curve.\n\n ### Errors\n - **`EMissingProtocolPricing`**: If pricing is missing for any protocol or curve.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "supported_curves_to_signature_algorithms_to_hash_schemes",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "sui",
                    "name": "vec_map"
                  },
                  "name": "VecMap",
                  "type_arguments": [
                    {
                      "phantom": false,
                      "argument": "u32"
                    },
                    {
                      "phantom": false,
                      "argument": {
                        "Datatype": {
                          "module": {
                            "address": "sui",
                            "name": "vec_map"
                          },
                          "name": "VecMap",
                          "type_arguments": [
                            {
                              "phantom": false,
                              "argument": "u32"
                            },
                            {
                              "phantom": false,
                              "argument": {
                                "vector": "u32"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "default_pricing",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "pricing"
                  },
                  "name": "PricingInfo",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "set_paused_curves_and_signature_algorithms": {
      "source_index": 58,
      "index": 58,
      "doc": " Sets the paused curves, signature algorithms and hash schemes.\n\n This function is used to set the paused curves, signature algorithms and hash schemes.\n\n ### Parameters\n - **`paused_curves`**: The curves to pause.\n - **`paused_signature_algorithms`**: The signature algorithms to pause.\n - **`paused_hash_schemes`**: The hash schemes to pause.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "paused_curves",
          "type_": {
            "vector": "u32"
          }
        },
        {
          "name": "paused_signature_algorithms",
          "type_": {
            "vector": "u32"
          }
        },
        {
          "name": "paused_hash_schemes",
          "type_": {
            "vector": "u32"
          }
        },
        {
          "name": "_",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "protocol_cap"
                  },
                  "name": "VerifiedProtocolCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "set_pricing_vote": {
      "source_index": 59,
      "index": 59,
      "doc": " Sets the pricing vote for a validator.\n\n This function is used to set the pricing vote for a validator.\n Cannot be called during the votes calculation.\n\n ### Parameters\n - **`validator_id`**: The ID of the validator.\n - **`pricing_vote`**: The pricing vote for the validator.\n\n ### Errors\n - **`ECannotSetDuringVotesCalculation`**: If the pricing vote is set during the votes calculation.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "pricing_vote",
          "type_": {
            "Datatype": {
              "module": {
                "address": "ika_dwallet_2pc_mpc",
                "name": "pricing"
              },
              "name": "PricingInfo",
              "type_arguments": []
            }
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_common",
                    "name": "validator_cap"
                  },
                  "name": "VerifiedValidatorOperationCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "subsidize_coordinator_with_sui": {
      "source_index": 60,
      "index": 60,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "sui",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "Coin",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "sui",
                        "name": "sui"
                      },
                      "name": "SUI",
                      "type_arguments": []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "subsidize_coordinator_with_ika": {
      "source_index": 61,
      "index": 61,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "ika",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "coin"
              },
              "name": "Coin",
              "type_arguments": [
                {
                  "phantom": true,
                  "argument": {
                    "Datatype": {
                      "module": {
                        "address": "ika",
                        "name": "ika"
                      },
                      "name": "IKA",
                      "type_arguments": []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "current_pricing": {
      "source_index": 62,
      "index": 62,
      "doc": null,
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "ika_dwallet_2pc_mpc",
              "name": "pricing"
            },
            "name": "PricingInfo",
            "type_arguments": []
          }
        }
      ]
    },
    "get_network_encryption_key_supported_curves": {
      "source_index": 63,
      "index": 63,
      "doc": " Get the supported curves for a network encryption key.\n\n ### Parameters\n - `self`: Reference to the coordinator\n - `dwallet_network_encryption_key_id`: ID of the network encryption key\n\n ### Returns\n Vector of supported curve identifiers\n\n ### Aborts\n - `EDWalletNetworkEncryptionKeyNotExist`: If the network encryption key doesn't exist",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCoordinatorInner",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "dwallet_network_encryption_key_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "vector": "u32"
        }
      ]
    },
    "dwallet_id": {
      "source_index": 64,
      "index": 64,
      "doc": " === Public Functions ===\n Returns the ID of the dWallet.\n\n ### Parameters\n - `self`: Reference to the dWallet Cap\n\n ### Returns\n The ID of the dWallet",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWalletCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "imported_key_dwallet_id": {
      "source_index": 65,
      "index": 65,
      "doc": " Returns the ID of the imported key dWallet.\n\n ### Parameters\n - `self`: Reference to the imported key dWallet Cap\n\n ### Returns\n The ID of the imported key dWallet",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "ImportedKeyDWalletCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "is_imported_key_dwallet": {
      "source_index": 66,
      "index": 66,
      "doc": " Returns true if the dWallet is an imported key dWallet.\n\n ### Parameters\n - `self`: Reference to the dWallet\n\n ### Returns\n True if the dWallet is an imported key dWallet, false otherwise",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_dwallet_active": {
      "source_index": 67,
      "index": 67,
      "doc": " Returns true if the dWallet is active.\n\n ### Parameters\n - `self`: Reference to the dWallet\n\n ### Returns\n True if the dWallet is active, false otherwise",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "dwallet_network_encryption_key_id": {
      "source_index": 68,
      "index": 68,
      "doc": " Returns the network encryption key ID of the dWallet.\n\n ### Parameters\n - `self`: Reference to the dWallet\n\n ### Returns\n The network encryption key ID of the dWallet",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "sui",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "curve": {
      "source_index": 69,
      "index": 69,
      "doc": " Returns the curve of the dWallet.\n\n ### Parameters\n - `self`: Reference to the dWallet\n\n ### Returns\n The curve of the dWallet",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u32"
      ]
    },
    "validate_active_and_get_public_output": {
      "source_index": 70,
      "index": 70,
      "doc": " Validates that a dWallet is in active state and returns its public output.\n\n This function ensures that a dWallet has completed its creation process\n (either DKG or imported key verification) and is ready for cryptographic\n operations like signing.\n\n ### Parameters\n - `self`: Reference to the dWallet to validate\n\n ### Returns\n Reference to the dWallet's public output\n\n ### Aborts\n - `EDWalletInactive`: If the dWallet is not in the `Active` state\n\n ### Active State Requirements\n A dWallet is considered active when:\n - DKG process has completed successfully, OR\n - Imported key verification has completed successfully\n - User has accepted their encrypted key share\n - Public output is available for cryptographic operations",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "vector": "u8"
            }
          ]
        }
      ]
    },
    "has_sign_session": {
      "source_index": 71,
      "index": 71,
      "doc": " Returns true if the `SignSession` object exists for the given `sign_id`.\n\n ### Parameters\n - `self`: Reference to the dWallet\n - `sign_id`: ID of the sign session\n\n ### Returns\n True if the `SignSession` object exists, false otherwise",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "sign_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "get_sign_session": {
      "source_index": 72,
      "index": 72,
      "doc": " Returns a reference to the `SignSession` object for the given `sign_id`.\n\n ### Parameters\n - `self`: Reference to the dWallet\n - `sign_id`: ID of the sign session\n\n ### Returns\n Reference to the `SignSession` object",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "DWallet",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "sign_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "sui",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "SignSession",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "get_sign_signature": {
      "source_index": 73,
      "index": 73,
      "doc": " Returns the signature of the `SignSession` object for the given `sign_id`.\n\n ### Parameters\n - `self`: Reference to the sign session\n\n ### Returns\n Option of the signature of the `SignSession` object",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "ika_dwallet_2pc_mpc",
                    "name": "coordinator_inner"
                  },
                  "name": "SignSession",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "std",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              {
                "phantom": false,
                "argument": {
                  "vector": "u8"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "structs": {
    "DWalletCoordinatorWitness": {
      "index": 0,
      "doc": null,
      "attributes": [],
      "abilities": [
        "Drop"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dummy_field": {
            "index": 0,
            "type_": "bool"
          }
        }
      }
    },
    "DWalletCoordinatorInner": {
      "index": 1,
      "doc": " Core coordinator for dWallet 2PC-MPC operations.\n\n This shared object manages all aspects of dWallet creation and operation:\n - dWallet lifecycle (DKG, signing, presigning)\n - Network encryption keys and user encryption\n - Session management and epoch transitions\n - Pricing and fee collection\n - Committee management and consensus\n\n Most importantly, the `dwallets` themselves, which holds the public key and public key shares,\n and the encryption of the network's share under the network's threshold encryption key.\n The encryption of the network's secret key share for every dWallet points to an encryption key in `dwallet_network_encryption_keys`,\n which also stores the encrypted encryption key shares of each validator and their public verification keys.\n\n For the user side, the secret key share is stored encrypted to the user encryption key (in `encryption_keys`) inside the dWallet,\n together with a signature on the public key (shares).\n Together, these constitute the necessary information to create a signature with the user.\n\n Next, `presign_sessions` holds the outputs of the Presign protocol which are later used for the signing protocol,\n and `partial_centralized_signed_messages` holds the partial signatures of users awaiting for a future sign once a `MessageApproval` is presented.\n\n Additionally, this structure holds management information, like the `previous_committee` and `active_committee` committees,\n information regarding `pricing_and_fee_manager`, all the `sessions_manager` and the `next_session_sequence_number` that will be used for the next session,\n and various other fields, like the supported and paused curves, signing algorithms and hashes.\n\n ## Key Components:\n - `dwallets`: Core dWallet objects with public keys and encrypted shares\n - `dwallet_network_encryption_keys`: Network threshold encryption keys\n - `encryption_keys`: User encryption keys for secure share storage\n - `presign_sessions`: Precomputed signing materials\n - `partial_centralized_signed_messages`: Future sign capabilities\n - `sessions_manager`: MPC session coordination\n - `pricing_and_fee_manager`: Economic incentives and fee collection\n - `active_committee`/`previous_committee`: Validator consensus groups\n - `support_config`: Cryptographic algorithm support and emergency controls",
      "attributes": [],
      "abilities": [
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "current_epoch": {
            "index": 0,
            "doc": " Current epoch number",
            "type_": "u64"
          },
          "sessions_manager": {
            "index": 1,
            "doc": " Session management and coordination",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "sessions_manager"
                },
                "name": "SessionsManager",
                "type_arguments": []
              }
            }
          },
          "dwallets": {
            "index": 2,
            "doc": " All dWallet instances (DWallet ID -> DWallet)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "DWallet",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "dwallet_network_encryption_keys": {
            "index": 3,
            "doc": " Network encryption keys (Network encryption key ID -> DWalletNetworkEncryptionKey)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "DWalletNetworkEncryptionKey",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "epoch_dwallet_network_encryption_keys_reconfiguration_completed": {
            "index": 4,
            "doc": " Number of network encryption keys reconfiguration have been completed for the current epoch",
            "type_": "u64"
          },
          "encryption_keys": {
            "index": 5,
            "doc": " User encryption keys (User encryption key address -> EncryptionKey)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": "address"
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "EncryptionKey",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_sessions": {
            "index": 6,
            "doc": " Presign sessions for signature optimization (Presign session ID -> PresignSession)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "PresignSession",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "partial_centralized_signed_messages": {
            "index": 7,
            "doc": " Partial user signatures for future signing (Partial user signature ID -> PartialUserSignature)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "PartialUserSignature",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "pricing_and_fee_manager": {
            "index": 8,
            "doc": " Pricing and fee management",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "pricing_and_fee_manager"
                },
                "name": "PricingAndFeeManager",
                "type_arguments": []
              }
            }
          },
          "active_committee": {
            "index": 9,
            "doc": " Current active validator committee",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_common",
                  "name": "bls_committee"
                },
                "name": "BlsCommittee",
                "type_arguments": []
              }
            }
          },
          "next_epoch_active_committee": {
            "index": 10,
            "doc": " Next epoch active validator committee",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_common",
                          "name": "bls_committee"
                        },
                        "name": "BlsCommittee",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "total_messages_processed": {
            "index": 11,
            "doc": " Total number of messages processed",
            "type_": "u64"
          },
          "last_processed_checkpoint_sequence_number": {
            "index": 12,
            "doc": " Last processed checkpoint sequence number",
            "type_": "u64"
          },
          "previous_epoch_last_checkpoint_sequence_number": {
            "index": 13,
            "doc": " Last checkpoint sequence number from previous epoch",
            "type_": "u64"
          },
          "support_config": {
            "index": 14,
            "doc": " Cryptographic algorithm support configuration",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "support_config"
                },
                "name": "SupportConfig",
                "type_arguments": []
              }
            }
          },
          "received_end_of_publish": {
            "index": 15,
            "doc": null,
            "type_": "bool"
          },
          "extra_fields": {
            "index": 16,
            "doc": " Any extra fields that's not defined statically",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "bag"
                },
                "name": "Bag",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletCap": {
      "index": 2,
      "doc": " Capability granting control over a specific dWallet.\n\n This capability allows the holder to perform operations on the associated dWallet,\n such as requesting signatures, managing encryption keys, and approving messages.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the controlled dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "ImportedKeyDWalletCap": {
      "index": 3,
      "doc": " Capability granting control over a specific imported key dWallet.\n\n Similar to DWalletCap but specifically for dWallets created from imported keys\n rather than through the DKG process.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the controlled imported key dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletNetworkEncryptionKey": {
      "index": 4,
      "doc": " Network-owned threshold encryption key for dWallet MPC protocols.\n\n This key enables the validator network to securely store and manage encrypted\n shares of dWallet secret keys. It supports reconfiguration across epochs to\n maintain security as the validator set changes.\n\n ## Lifecycle Phases\n\n ### Initial Creation\n - Network DKG generates the initial threshold encryption key\n - `network_dkg_public_output` contains the key and validator shares\n\n ### Reconfiguration\n - Triggered before epoch transitions when validator set changes\n - `reconfiguration_public_outputs` stores updated keys per epoch\n - Ensures continuous security across validator set changes\n\n ## Data Storage Strategy\n - Large cryptographic outputs are chunked due to storage limitations\n - Chunked data is reconstructed during verification and usage\n - Supports both initial DKG and ongoing reconfiguration outputs\n\n ## Security Properties\n - Threshold encryption protects against individual validator compromise\n - Reconfiguration maintains security across validator set changes\n - Cryptographic proofs ensure data integrity",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "dkg_at_epoch": {
            "index": 1,
            "doc": " Epoch when the network DKG was initiated",
            "type_": "u64"
          },
          "network_dkg_public_output": {
            "index": 2,
            "doc": " Initial network DKG output (chunked for storage efficiency)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "table_vec"
                },
                "name": "TableVec",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "vector": "u8"
                    }
                  }
                ]
              }
            }
          },
          "reconfiguration_public_outputs": {
            "index": 3,
            "doc": " Reconfiguration outputs indexed by epoch (Epoch -> Chunked Output)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "table"
                },
                "name": "Table",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": "u64"
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "table_vec"
                        },
                        "name": "TableVec",
                        "type_arguments": [
                          {
                            "phantom": true,
                            "argument": {
                              "vector": "u8"
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "dkg_params_for_network": {
            "index": 4,
            "doc": " Parameters for network dkg",
            "type_": {
              "vector": "u8"
            }
          },
          "supported_curves": {
            "index": 5,
            "doc": " Curves supported by this network encryption key",
            "type_": {
              "vector": "u32"
            }
          },
          "state": {
            "index": 6,
            "doc": " Current operational state",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWalletNetworkEncryptionKeyState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "EncryptionKey": {
      "index": 5,
      "doc": " User encryption key for secure dWallet secret key share storage.\n\n Encryption keys enable secure transfer and storage of encrypted user secret key shares\n between accounts. Each user address has an associated encryption key that allows\n others to encrypt data specifically for that user to ensure sensitive information\n remains confidential during transmission.\n\n Each address on the Ika is associated with a unique encryption key.\n When a user intends to send encrypted data (i.e. when sharing the secret key share to grant access and/or transfer a dWallet) to another user,\n they use the recipient's encryption key to encrypt the data.\n The recipient is then the sole entity capable of decrypting and accessing this information, ensuring secure, end-to-end encryption.\n\n ## Security Model\n - Keys are Ed25519-signed to prove authenticity\n - Each address maintains one active encryption key\n - Keys support various cryptographic curves\n - Encrypted shares can only be decrypted by the key owner\n\n ## Use Cases\n - Encrypting user secret key shares during dWallet creation\n - Re-encrypting shares for access transfer or dWallet sharing",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this key was created",
            "type_": "u64"
          },
          "curve": {
            "index": 2,
            "doc": " Cryptographic curve this key supports",
            "type_": "u32"
          },
          "encryption_key": {
            "index": 3,
            "doc": " Serialized encryption key data",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_signature": {
            "index": 4,
            "doc": " Ed25519 signature proving encryption key authenticity, signed by the `signer_public_key`.\n Used to verify the data originated from the `signer_address`.",
            "type_": {
              "vector": "u8"
            }
          },
          "signer_public_key": {
            "index": 5,
            "doc": " Ed25519 public key used to create the signature",
            "type_": {
              "vector": "u8"
            }
          },
          "signer_address": {
            "index": 6,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          }
        }
      }
    },
    "EncryptedUserSecretKeyShare": {
      "index": 6,
      "doc": " Encrypted user secret key share with cryptographic verification.\n\n Represents a user's secret key share that has been encrypted to a specific\n user's encryption key. Includes zero-knowledge proofs that the encryption\n is valid and corresponds to the dWallet's public key share.\n\n ## Verification Process\n 1. Network verifies the encryption proof\n 2. User decrypts and verifies the share matches the public output\n 3. User signs the public output to accept the share\n\n ## Creation Methods\n - **Direct**: Created during DKG second round\n - **Re-encryption**: Created when transferring access to another user\n\n ## Security Properties\n - Zero-knowledge proof ensures encryption correctness\n - Only the target user can decrypt the share\n - Cryptographically linked to the associated dWallet",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this encrypted share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this share was created",
            "type_": "u64"
          },
          "dwallet_id": {
            "index": 2,
            "doc": " ID of the dWallet this share belongs to",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_centralized_secret_share_and_proof": {
            "index": 3,
            "doc": " Encrypted secret share with zero-knowledge proof of correctness\n for the dWallet's secret key share (of `dwallet_id`).",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 4,
            "doc": " ID of the encryption key used for encryption",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key_address": {
            "index": 5,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          },
          "source_encrypted_user_secret_key_share_id": {
            "index": 6,
            "doc": " Source share ID if this was created via re-encryption (None for DKG-created)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "state": {
            "index": 7,
            "doc": " Current verification and acceptance state",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "EncryptedUserSecretKeyShareState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "UnverifiedPartialUserSignatureCap": {
      "index": 7,
      "doc": " Unverified capability for a partial user signature requiring network validation.\n\n This capability is issued when a user creates a partial signature but must be\n verified by the network before it can be used for conditional signing.\n\n ## Verification Process\n 1. Network validates the user's partial signature\n 2. Network verifies the signature matches the message and dWallet\n 3. Network confirms the presign material is valid\n 4. Capability becomes verified and ready for use\n\n ## Security Properties\n - Prevents use of invalid partial signatures\n - Ensures network validation before conditional signing\n - Capability-based authorization for future signing",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this capability",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "partial_centralized_signed_message_id": {
            "index": 1,
            "doc": " ID of the associated partial user signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "VerifiedPartialUserSignatureCap": {
      "index": 8,
      "doc": " Verified capability for a network-validated partial user signature.\n\n This capability proves that:\n - The user's partial signature has been validated by the network\n - The signature matches the intended message and dWallet\n - The associated presign material is valid and reserved\n - The holder is authorized to request signature completion\n\n ## Usage in Conditional Signing\n - Can be combined with `MessageApproval` to complete signatures\n - Enables conditional execution when multiple conditions are met\n - Supports atomic multi-party transactions\n\n ## Security Guarantees\n - Network has verified the partial signature authenticity\n - Presign material is reserved and cannot be double-spent\n - Only the capability holder can trigger signature completion",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this capability",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "partial_centralized_signed_message_id": {
            "index": 1,
            "doc": " ID of the associated verified partial user signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "PartialUserSignature": {
      "index": 9,
      "doc": " Partial user signature for future/conditional signing scenarios.\n\n Represents a message that has been signed by the user (centralized party) but not\n yet by the network. This enables conditional signing patterns where user consent\n is obtained first, and network signing occurs later when conditions are met.\n\n ## Use Cases\n\n ### Decentralized Exchange (DEX)\n 1. User A creates a partial signature to buy BTC with ETH at price X\n 2. User B creates a matching partial signature to sell BTC for ETH at price X\n 3. When both conditions are met, the network completes both signatures\n 4. Atomic swap is executed\n\n ### Conditional Payments\n - Pre-authorize payments that execute when specific conditions are met\n - Escrow-like functionality with delayed execution\n - Multi-party agreement protocols\n\n ## Security Properties\n - User signature proves intent and authorization\n - Presign capability ensures single-use semantics\n - Network verification prevents malicious signatures\n - Capability-based access control for completion",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this partial signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this partial signature was created",
            "type_": "u64"
          },
          "presign_cap": {
            "index": 2,
            "doc": " Presign capability (consumed to prevent reuse)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "VerifiedPresignCap",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 3,
            "doc": " ID of the dWallet that will complete the signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "cap_id": {
            "index": 4,
            "doc": " ID of the capability that controls completion",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 5,
            "doc": " Cryptographic curve for the signature",
            "type_": "u32"
          },
          "signature_algorithm": {
            "index": 6,
            "doc": " Signature algorithm to be used",
            "type_": "u32"
          },
          "hash_scheme": {
            "index": 7,
            "doc": " Hash scheme to apply to the message",
            "type_": "u32"
          },
          "message": {
            "index": 8,
            "doc": " Raw message bytes to be signed",
            "type_": {
              "vector": "u8"
            }
          },
          "message_centralized_signature": {
            "index": 9,
            "doc": " User's partial signature on the message",
            "type_": {
              "vector": "u8"
            }
          },
          "state": {
            "index": 10,
            "doc": " Current verification state",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "PartialUserSignatureState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWallet": {
      "index": 10,
      "doc": " Represents a decentralized wallet (dWallet) created through DKG or key import.\n\n A dWallet encapsulates cryptographic key material and provides secure signing\n capabilities through Multi-Party Computation. It can operate in two security models:\n\n 1. **Zero-trust mode**: User secret key share remains encrypted, requiring user\n    participation for every signature. Maximum security.\n 2. **Trust-minimized mode**: User secret key share is made public, allowing\n    network-only signing. Reduced security but improved UX.\n\n ## Security Models\n - **DKG dWallets**: Created through distributed key generation\n - **Imported Key dWallets**: Created from existing private keys\n\n ## State Lifecycle\n The dWallet progresses through various states from creation to active use,\n with different paths for DKG and imported key variants.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for the dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this dWallet was created",
            "type_": "u64"
          },
          "curve": {
            "index": 2,
            "doc": " Elliptic curve used for cryptographic operations",
            "type_": "u32"
          },
          "public_user_secret_key_share": {
            "index": 3,
            "doc": " Public user secret key share (if trust-minimized mode is enabled)\n\n - `None`: Zero-trust mode - user participation required for signing\n - `Some(share)`: Trust-minimized mode - network can sign independently",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "vector": "u8"
                    }
                  }
                ]
              }
            }
          },
          "dwallet_cap_id": {
            "index": 4,
            "doc": " ID of the capability that controls this dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 5,
            "doc": " Network encryption key used for securing this dWallet's network share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "is_imported_key_dwallet": {
            "index": 6,
            "doc": " Whether this dWallet was created from an imported key",
            "type_": "bool"
          },
          "encrypted_user_secret_key_shares": {
            "index": 7,
            "doc": " Encrypted user secret key shares (Encryption user secret key share ID -> EncryptedUserSecretKeyShare)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "EncryptedUserSecretKeyShare",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "sign_sessions": {
            "index": 8,
            "doc": " Signing sessions (Sign ID -> SignSession)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object_table"
                },
                "name": "ObjectTable",
                "type_arguments": [
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  },
                  {
                    "phantom": true,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "ika_dwallet_2pc_mpc",
                          "name": "coordinator_inner"
                        },
                        "name": "SignSession",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "state": {
            "index": 9,
            "doc": " Current state of the dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "DWalletState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "UnverifiedPresignCap": {
      "index": 11,
      "doc": " Unverified capability for a presign session requiring validation.\n\n This capability is issued when a presign is requested but must be verified\n as completed before it can be used for signing operations.\n\n ## Verification Process\n 1. Check that the referenced presign session is completed\n 2. Validate capability ID matches the session\n 3. Convert to `VerifiedPresignCap` for actual use\n\n ## Security Model\n - Cannot be used for signing until verified\n - Prevents use of incomplete or invalid presigns\n - Capability-based access control",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " Target dWallet ID for dWallet-specific presigns\n\n - `Some(id)`: Can only be used with the specified dWallet (e.g. ECDSA requirement)\n - `None`: Global presign, can be used with any compatible dWallet (e.g. Schnorr and EdDSA)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_id": {
            "index": 2,
            "doc": " ID of the associated presign session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "VerifiedPresignCap": {
      "index": 12,
      "doc": " Verified capability for a completed presign session ready for signing.\n\n This capability proves that:\n - The associated presign session has completed successfully\n - The capability holder has authorization to use the presign\n - The presign matches the cryptographic requirements\n\n ## Usage Constraints\n - Single-use: Consumed during signature generation\n - Algorithm-specific: Must match the target signature algorithm\n - Expiration: May have epoch-based validity limits\n\n ## Security Properties\n - Cryptographically bound to specific presign output\n - Prevents double-spending of presign material\n - Enforces proper authorization flow",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " Target dWallet ID for dWallet-specific presigns\n\n - `Some(id)`: Can only be used with the specified dWallet (e.g. ECDSA requirement)\n - `None`: Global presign, can be used with any compatible dWallet (e.g. Schnorr and EdDSA)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_id": {
            "index": 2,
            "doc": " ID of the associated presign session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "PresignSession": {
      "index": 13,
      "doc": " Presign session for optimized signature generation.\n\n Presigns are cryptographic precomputations that enable faster online signing\n by performing expensive computations offline, before the message is known.\n This significantly reduces signing latency in real-time applications.\n\n ## Types of Presigns\n\n ### dWallet-Specific Presigns\n - Bound to a specific dWallet ID\n - Required for algorithms like ECDSA\n - Higher security isolation\n\n ### Global Presigns\n - Can be used with any dWallet under the same network key\n - Supported by algorithms like Schnorr and EdDSA\n - Better resource efficiency\n\n ## Performance Benefits\n - Reduces online full signing flow time significantly\n - Enables high-frequency trading and real-time applications\n - Improves user experience with instant signatures\n\n ## Security Properties\n - Single-use: Each presign can only be used once\n - Algorithm-specific: Tailored to the signature algorithm\n - Network-secured: Protected by threshold cryptography",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " Unique identifier for this presign session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this presign was created",
            "type_": "u64"
          },
          "curve": {
            "index": 2,
            "doc": " Elliptic curve used for the presign",
            "type_": "u32"
          },
          "signature_algorithm": {
            "index": 3,
            "doc": " Signature algorithm this presign supports",
            "type_": "u32"
          },
          "dwallet_id": {
            "index": 4,
            "doc": " Target dWallet ID (None for global presigns)\n\n - `Some(id)`: dWallet-specific presign (e.g. required for ECDSA)\n - `None`: Global presign (e.g. available for Schnorr, EdDSA)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "cap_id": {
            "index": 5,
            "doc": " ID of the capability that controls this presign",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "state": {
            "index": 6,
            "doc": " Current state of the presign computation",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "PresignState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "SignSession": {
      "index": 14,
      "doc": " Signing session for generating dWallet signatures.\n\n Represents an ongoing or completed signature generation process using\n the 2PC-MPC protocol. Combines user and network contributions to create\n a complete signature.\n\n ## Signing Process\n 1. User provides message approval and presign capability\n 2. Network validates the request and user's partial signature\n 3. Network combines with its share to generate the full signature\n 4. Session transitions to completed state with the final signature\n\n ## Types of Signing\n - **Standard**: Direct signing with immediate user participation\n - **Future**: Conditional signing using pre-validated partial signatures\n - **Imported Key**: Signing with imported key dWallets\n\n ## Performance Optimization\n - Uses presign material to accelerate the online signing process\n - Reduces latency from seconds to milliseconds for real-time applications\n - Enables high-frequency trading and interactive applications",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "created_at_epoch": {
            "index": 1,
            "doc": " Epoch when this signing session was initiated",
            "type_": "u64"
          },
          "dwallet_id": {
            "index": 2,
            "doc": " ID of the dWallet performing the signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "state": {
            "index": 3,
            "doc": " Current state of the signing process",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "ika_dwallet_2pc_mpc",
                  "name": "coordinator_inner"
                },
                "name": "SignState",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "MessageApproval": {
      "index": 15,
      "doc": " Authorization to sign a specific message with a dWallet.\n\n This approval object grants permission to sign a message using a dWallet's\n secret key material. It specifies the exact cryptographic parameters and\n message content that has been authorized.\n\n ## Security Properties\n - Single-use: Consumed during signature generation to prevent replay\n - Cryptographically bound: Specifies exact algorithm and hash scheme\n - Message-specific: Tied to specific message content\n - dWallet-specific: Can only be used with the designated dWallet\n\n ## Usage Pattern\n 1. User creates approval for specific message and dWallet\n 2. Approval is combined with presign capability\n 3. Network validates and generates signature\n 4. Approval is consumed and cannot be reused",
      "attributes": [],
      "abilities": [
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet authorized to sign this message",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "signature_algorithm": {
            "index": 1,
            "doc": " Cryptographic signature algorithm to use",
            "type_": "u32"
          },
          "hash_scheme": {
            "index": 2,
            "doc": " Hash scheme to apply to the message before signing",
            "type_": "u32"
          },
          "message": {
            "index": 3,
            "doc": " Raw message bytes to be signed",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "ImportedKeyMessageApproval": {
      "index": 16,
      "doc": " Authorization to sign a specific message with an imported key dWallet.\n\n Similar to `MessageApproval` but specifically for dWallets created from\n imported private keys rather than through distributed key generation.\n\n ## Differences from Standard MessageApproval\n - Used with `ImportedKeyDWalletCap` instead of `DWalletCap`\n - May have different security assumptions due to key import process\n - Supports the same cryptographic algorithms and operations\n\n ## Security Considerations\n - Imported key dWallets may have different trust models\n - Users should understand the provenance of imported keys\n - Same single-use and message-binding properties apply",
      "attributes": [],
      "abilities": [
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the imported key dWallet authorized to sign this message",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "signature_algorithm": {
            "index": 1,
            "doc": " Cryptographic signature algorithm to use",
            "type_": "u32"
          },
          "hash_scheme": {
            "index": 2,
            "doc": " Hash scheme to apply to the message before signing",
            "type_": "u32"
          },
          "message": {
            "index": 3,
            "doc": " Raw message bytes to be signed",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "DWalletNetworkDKGEncryptionKeyRequestEvent": {
      "index": 17,
      "doc": " Event requesting network DKG for a new encryption key.\n\n Initiates the distributed key generation process for creating a new\n network threshold encryption key used by the validator committee.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the network encryption key to be generated",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "params_for_network": {
            "index": 1,
            "doc": " Parameters for the network",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "CompletedDWalletNetworkDKGEncryptionKeyEvent": {
      "index": 18,
      "doc": " Event emitted when network DKG for an encryption key completes successfully.\n\n Signals that the validator network has successfully generated a new\n threshold encryption key and it's ready for use in securing dWallet shares.\n\n ## Next Steps\n The encryption key can now be used for:\n - Encrypting dWallet network shares\n - Securing validator committee communications\n - Supporting MPC protocol operations",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the successfully generated network encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedDWalletNetworkDKGEncryptionKeyEvent": {
      "index": 19,
      "doc": " Event emitted when network DKG for an encryption key is rejected.\n\n Indicates that the validator network could not complete the DKG process\n for the requested encryption key, typically due to insufficient participation\n or validation failures.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the rejected network encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletEncryptionKeyReconfigurationRequestEvent": {
      "index": 20,
      "doc": " Event requesting reconfiguration of a network encryption key.\n\n Initiates the process to update a network encryption key for a new\n validator committee, ensuring continuity of service across epoch transitions.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the network encryption key to be reconfigured",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "CompletedDWalletEncryptionKeyReconfigurationEvent": {
      "index": 21,
      "doc": " Event emitted when encryption key reconfiguration completes successfully.\n\n Signals that the network encryption key has been successfully updated\n for the new validator committee and is ready for the next epoch.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the successfully reconfigured network encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedDWalletEncryptionKeyReconfigurationEvent": {
      "index": 22,
      "doc": " Event emitted when encryption key reconfiguration is rejected.\n\n Indicates that the validator network could not complete the reconfiguration\n process, potentially requiring retry or manual intervention.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_network_encryption_key_id": {
            "index": 0,
            "doc": " ID of the network encryption key that failed reconfiguration",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletDKGFirstRoundRequestEvent": {
      "index": 23,
      "doc": " Event requesting the start of DKG first round from the validator network.\n\n Initiates the distributed key generation process for a new dWallet.\n Validators respond by executing the first round of the DKG protocol.",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_cap_id": {
            "index": 1,
            "doc": " ID of the capability that controls the dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 2,
            "doc": " Network encryption key for securing the dWallet's network share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 3,
            "doc": " Elliptic curve for the dWallet's cryptographic operations",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedDWalletDKGFirstRoundEvent": {
      "index": 24,
      "doc": " Event emitted when DKG first round completes successfully.\n\n Signals that the validator network has completed the first round of DKG\n and provides the output needed for the user to proceed with the second round.\n\n ## Next Steps\n Users should:\n 1. Process the `first_round_output`\n 2. Generate their contribution to the DKG\n 3. Call `request_dwallet_dkg_second_round()` to continue",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "first_round_output": {
            "index": 1,
            "doc": " Public output from the first round of DKG",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "RejectedDWalletDKGFirstRoundEvent": {
      "index": 25,
      "doc": " Event emitted when DKG first round is rejected by the network.\n\n Indicates that the validator network could not complete the first round\n of DKG for the requested dWallet, typically due to validation failures\n or insufficient validator participation.",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet whose DKG first round was rejected",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletDKGSecondRoundRequestEvent": {
      "index": 26,
      "doc": " Event requesting the second round of DKG from the validator network.\n\n This event initiates the final phase of distributed key generation where\n the user's contribution is combined with the network's first round output\n to complete the dWallet creation process.\n\n ## Process Flow\n 1. User processes the first round output from validators\n 2. User generates their cryptographic contribution\n 3. User encrypts their secret key share\n 4. Network validates and completes the DKG process\n\n ## Security Properties\n - User contribution ensures the user controls part of the key\n - Network validation prevents malicious key generation\n - Encrypted shares ensure proper key distribution",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_user_secret_key_share_id": {
            "index": 0,
            "doc": " ID of the encrypted user secret key share being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet being created through DKG",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "first_round_output": {
            "index": 2,
            "doc": " Cryptographic output from the network's first round of DKG",
            "type_": {
              "vector": "u8"
            }
          },
          "centralized_public_key_share_and_proof": {
            "index": 3,
            "doc": " User's public key share with cryptographic proof of correctness",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_cap_id": {
            "index": 4,
            "doc": " ID of the dWallet capability that authorizes this operation",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_centralized_secret_share_and_proof": {
            "index": 5,
            "doc": " User's encrypted secret key share with zero-knowledge proof",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key": {
            "index": 6,
            "doc": " Serialized encryption key used to encrypt the user's secret share",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 7,
            "doc": " ID of the encryption key object",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key_address": {
            "index": 8,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          },
          "user_public_output": {
            "index": 9,
            "doc": " User's contribution to the DKG public output",
            "type_": {
              "vector": "u8"
            }
          },
          "signer_public_key": {
            "index": 10,
            "doc": " Ed25519 public key for verifying the user's signature",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 11,
            "doc": " ID of the network encryption key for securing network shares",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 12,
            "doc": " Elliptic curve for the dWallet's cryptographic operations",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedDWalletDKGSecondRoundEvent": {
      "index": 27,
      "doc": " Event emitted when DKG second round completes successfully.\n\n Signals the successful completion of the distributed key generation process.\n The dWallet is now ready for user acceptance and can begin signing operations\n once the user validates and accepts their encrypted key share.\n\n ## Next Steps for Users\n 1. Validate the public output matches expected values\n 2. Decrypt and verify the received encrypted key share\n 3. Sign the public output to accept the dWallet\n 4. Begin using the dWallet for signing operations\n\n ## Security Verification\n Users should verify that the public key corresponds to their expected\n contribution and that the encrypted share can be properly decrypted.",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the successfully created dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Complete public output from the DKG process (public key and metadata)",
            "type_": {
              "vector": "u8"
            }
          },
          "encrypted_user_secret_key_share_id": {
            "index": 2,
            "doc": " ID of the user's encrypted secret key share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedDWalletDKGSecondRoundEvent": {
      "index": 28,
      "doc": " Event emitted when DKG second round is rejected by the network.\n\n Indicates that the validator network rejected the user's contribution\n to the DKG process, typically due to invalid proofs or malformed data.\n\n ## Common Rejection Reasons\n - Invalid cryptographic proofs\n - Malformed user contribution\n - Encryption verification failures\n - Network consensus issues",
      "attributes": [
        {
          "Name": "deprecated"
        }
      ],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet whose DKG second round was rejected",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Public output that was being processed when rejection occurred",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "DWalletDKGRequestEvent": {
      "index": 29,
      "doc": " Event requesting the second round of DKG from the validator network.\n\n This event initiates the final phase of distributed key generation where\n the user's contribution is combined with the network's first round output\n to complete the dWallet creation process.\n\n ## Process Flow\n 1. User processes the first round output from validators\n 2. User generates their cryptographic contribution\n 3. User encrypts their secret key share\n 4. Network validates and completes the DKG process\n\n ## Security Properties\n - User contribution ensures the user controls part of the key\n - Network validation prevents malicious key generation\n - Encrypted shares ensure proper key distribution",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_user_secret_key_share_id": {
            "index": 0,
            "doc": " ID of the encrypted user secret key share being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet being created through DKG",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "centralized_public_key_share_and_proof": {
            "index": 2,
            "doc": " User's public key share with cryptographic proof of correctness",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_cap_id": {
            "index": 3,
            "doc": " ID of the dWallet capability that authorizes this operation",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_centralized_secret_share_and_proof": {
            "index": 4,
            "doc": " User's encrypted secret key share with zero-knowledge proof",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key": {
            "index": 5,
            "doc": " Serialized encryption key used to encrypt the user's secret share",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 6,
            "doc": " ID of the encryption key object",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key_address": {
            "index": 7,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          },
          "user_public_output": {
            "index": 8,
            "doc": " User's contribution to the DKG public output",
            "type_": {
              "vector": "u8"
            }
          },
          "signer_public_key": {
            "index": 9,
            "doc": " Ed25519 public key for verifying the user's signature",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 10,
            "doc": " ID of the network encryption key for securing network shares",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 11,
            "doc": " Elliptic curve for the dWallet's cryptographic operations",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedDWalletDKGEvent": {
      "index": 30,
      "doc": " Event emitted when DKG second round completes successfully.\n\n Signals the successful completion of the distributed key generation process.\n The dWallet is now ready for user acceptance and can begin signing operations\n once the user validates and accepts their encrypted key share.\n\n ## Next Steps for Users\n 1. Validate the public output matches expected values\n 2. Decrypt and verify the received encrypted key share\n 3. Sign the public output to accept the dWallet\n 4. Begin using the dWallet for signing operations\n\n ## Security Verification\n Users should verify that the public key corresponds to their expected\n contribution and that the encrypted share can be properly decrypted.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the successfully created dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Complete public output from the DKG process (public key and metadata)",
            "type_": {
              "vector": "u8"
            }
          },
          "encrypted_user_secret_key_share_id": {
            "index": 2,
            "doc": " ID of the user's encrypted secret key share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedDWalletDKGEvent": {
      "index": 31,
      "doc": " Event emitted when DKG second round is rejected by the network.\n\n Indicates that the validator network rejected the user's contribution\n to the DKG process, typically due to invalid proofs or malformed data.\n\n ## Common Rejection Reasons\n - Invalid cryptographic proofs\n - Malformed user contribution\n - Encryption verification failures\n - Network consensus issues",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet whose DKG second round was rejected",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Public output that was being processed when rejection occurred",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "DWalletImportedKeyVerificationRequestEvent": {
      "index": 32,
      "doc": " Event requesting verification of an imported key dWallet from the network.\n\n This event initiates the validation process for a dWallet created from an\n existing private key rather than through distributed key generation.\n\n ## Imported Key Flow\n 1. User creates an imported key dWallet object\n 2. User provides cryptographic proof of key ownership\n 3. Network validates the proof and key authenticity\n 4. If valid, the dWallet becomes active for signing\n\n ## Security Considerations\n - Imported keys may have different security assumptions than DKG keys\n - Network validates proof of ownership but cannot verify key generation process\n - Users should understand the provenance and security of imported keys",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the imported key dWallet being verified",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_user_secret_key_share_id": {
            "index": 1,
            "doc": " ID of the encrypted user secret key share being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "centralized_party_message": {
            "index": 2,
            "doc": " User's cryptographic message for importing computation",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_cap_id": {
            "index": 3,
            "doc": " ID of the imported key dWallet capability",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_centralized_secret_share_and_proof": {
            "index": 4,
            "doc": " User's encrypted secret key share with proof of correctness",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key": {
            "index": 5,
            "doc": " Serialized encryption key used for user share encryption",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 6,
            "doc": " ID of the encryption key object",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key_address": {
            "index": 7,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          },
          "user_public_output": {
            "index": 8,
            "doc": " User's public key contribution and verification data",
            "type_": {
              "vector": "u8"
            }
          },
          "signer_public_key": {
            "index": 9,
            "doc": " Ed25519 public key for signature verification, used to verify the user's signature on the public output",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 10,
            "doc": " ID of the network encryption key for securing network shares",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 11,
            "doc": " Elliptic curve for the imported key dWallet",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedDWalletImportedKeyVerificationEvent": {
      "index": 33,
      "doc": " Event emitted when imported key verification completes successfully.\n\n Signals that the network has validated the user's imported key and the\n dWallet is ready for user acceptance and subsequent signing operations.\n\n ## Next Steps for Users\n 1. Verify the public output matches the imported key\n 2. Validate the encrypted key share can be properly decrypted\n 3. Sign the public output to accept the dWallet\n 4. Begin using the imported key dWallet for signatures",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the successfully verified imported key dWallet",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Public output from the verification process",
            "type_": {
              "vector": "u8"
            }
          },
          "encrypted_user_secret_key_share_id": {
            "index": 2,
            "doc": " ID of the user's encrypted secret key share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedDWalletImportedKeyVerificationEvent": {
      "index": 34,
      "doc": " Event emitted when imported key verification is rejected by the network.\n\n Indicates that the validator network could not validate the imported key,\n typically due to invalid proofs or malformed verification data.\n\n ## Common Rejection Reasons\n - Invalid cryptographic proofs of key ownership\n - Malformed imported key data\n - Verification signature failures\n - Incompatible curve parameters",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the imported key dWallet that failed verification",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "CreatedEncryptionKeyEvent": {
      "index": 35,
      "doc": " Event emitted when an encryption key is successfully created and registered.\n\n This event signals that a new encryption key has been validated and is available\n for use in encrypting user secret key shares.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encryption_key_id": {
            "index": 0,
            "doc": " ID of the newly created encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "signer_address": {
            "index": 1,
            "doc": " Address of the encryption key owner",
            "type_": "address"
          }
        }
      }
    },
    "EncryptedShareVerificationRequestEvent": {
      "index": 36,
      "doc": " Event requesting verification of an encrypted user secret key share.\n\n This event initiates the validation process for re-encrypted user shares,\n typically used when transferring dWallet access to another user or when\n creating additional encrypted copies for backup purposes.\n\n ## Re-encryption Use Cases\n - **Access Transfer**: Share dWallet access with another user\n - **Access Granting**: Allow multiple users to control the same dWallet\n - **Backup Creation**: Create additional encrypted copies for redundancy\n - **Key Recovery**: Re-encrypt shares for recovery scenarios\n\n ## Verification Process\n 1. User re-encrypts their secret key share to a new encryption key\n 2. User provides zero-knowledge proof of correct re-encryption\n 3. Network validates the proof against the dWallet's public output\n 4. If valid, the new encrypted share becomes available for use\n\n ## Security Properties\n - Zero-knowledge proofs ensure re-encryption correctness\n - Original share remains secure during the process\n - Network cannot learn the secret key material\n - Destination user must decrypt and validate the share",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_centralized_secret_share_and_proof": {
            "index": 0,
            "doc": " User's encrypted secret key share with zero-knowledge proof of correctness",
            "type_": {
              "vector": "u8"
            }
          },
          "public_output": {
            "index": 1,
            "doc": " Public output of the dWallet (used for verification), this is the\n public output of the dWallet that the user's share is being encrypted to.\n This value is taken from the the dWallet object during event creation, and\n we cannot get it from the user's side.",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_id": {
            "index": 2,
            "doc": " ID of the dWallet this encrypted share belongs to",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key": {
            "index": 3,
            "doc": " Serialized encryption key used for the re-encryption",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 4,
            "doc": " ID of the encryption key object",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encrypted_user_secret_key_share_id": {
            "index": 5,
            "doc": " ID of the new encrypted user secret key share being created",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "source_encrypted_user_secret_key_share_id": {
            "index": 6,
            "doc": " ID of the source encrypted share (if this is a re-encryption)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 7,
            "doc": " ID of the network encryption key securing network shares",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 8,
            "doc": " Elliptic curve for the dWallet",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedEncryptedShareVerificationEvent": {
      "index": 37,
      "doc": " Event emitted when encrypted share verification completes successfully.\n\n Signals that the network has validated the re-encryption proof and the\n new encrypted share is ready for the destination user to accept.\n\n ## Next Steps for Recipient\n 1. Decrypt the encrypted share using their private encryption key\n 2. Verify the decrypted share matches the dWallet's public output\n 3. Sign the public output to accept and activate the share\n 4. Use the share for dWallet operations",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_user_secret_key_share_id": {
            "index": 0,
            "doc": " ID of the successfully verified encrypted user secret key share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet associated with this encrypted share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedEncryptedShareVerificationEvent": {
      "index": 38,
      "doc": " Event emitted when encrypted share verification is rejected.\n\n Indicates that the network could not validate the re-encryption proof,\n typically due to invalid cryptographic proofs or verification failures.\n\n ## Common Rejection Reasons\n - Invalid zero-knowledge proof of re-encryption\n - Mismatch between encrypted share and public output\n - Corrupted or malformed encryption data\n - Incompatible encryption key parameters",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_user_secret_key_share_id": {
            "index": 0,
            "doc": " ID of the encrypted user secret key share that failed verification",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet associated with the failed share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "AcceptEncryptedUserShareEvent": {
      "index": 39,
      "doc": " Event emitted when a user accepts an encrypted secret key share.\n\n This event signals the final step in the share transfer process where\n the recipient has validated and accepted their encrypted share, making\n the dWallet fully accessible to them.\n\n ## Acceptance Process\n 1. User decrypts the share with their private encryption key\n 2. User verifies the share produces the correct public key\n 3. User signs the public output to prove acceptance\n 4. Share becomes active and usable for signing operations\n\n ## Security Verification\n The user's signature on the public output serves as cryptographic proof that:\n - They successfully decrypted the share\n - The share is mathematically correct\n - They accept responsibility for the dWallet",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "encrypted_user_secret_key_share_id": {
            "index": 0,
            "doc": " ID of the accepted encrypted user secret key share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet associated with this share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "user_output_signature": {
            "index": 2,
            "doc": " User's signature on the public output proving acceptance",
            "type_": {
              "vector": "u8"
            }
          },
          "encryption_key_id": {
            "index": 3,
            "doc": " ID of the encryption key used for this share",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "encryption_key_address": {
            "index": 4,
            "doc": " Address of the user who accepted the share",
            "type_": "address"
          }
        }
      }
    },
    "MakeDWalletUserSecretKeySharePublicRequestEvent": {
      "index": 40,
      "doc": " Event requesting to make a dWallet's user secret key share public.\n\n This event initiates the transition from zero-trust mode to trust-minimized mode,\n where the user's secret key share becomes publicly visible, allowing the network\n to sign independently without user participation.\n\n ## ⚠️ CRITICAL SECURITY WARNING\n **This operation is IRREVERSIBLE and reduces security!**\n\n ### Security Trade-offs\n - **Before**: Zero-trust - user participation required for every signature\n - **After**: Trust-minimized - network can sign independently\n - **Risk**: Compromised validators could potentially misuse the dWallet\n\n ### When to Consider This\n - High-frequency automated trading where latency is critical\n - Applications requiring instant signature generation\n - When convenience outweighs the security reduction\n - Smart contract automation that needs independent signing\n\n ### Use Cases\n - DeFi protocols with automated rebalancing\n - Gaming applications with instant transactions\n - IoT devices requiring autonomous signing\n - Bot trading with microsecond latency requirements",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "public_user_secret_key_share": {
            "index": 0,
            "doc": " The user's secret key share to be made public",
            "type_": {
              "vector": "u8"
            }
          },
          "public_output": {
            "index": 1,
            "doc": " dWallet's public output for verification",
            "type_": {
              "vector": "u8"
            }
          },
          "curve": {
            "index": 2,
            "doc": " Elliptic curve for the dWallet",
            "type_": "u32"
          },
          "dwallet_id": {
            "index": 3,
            "doc": " ID of the dWallet being transitioned to trust-minimized mode",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 4,
            "doc": " ID of the network encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "CompletedMakeDWalletUserSecretKeySharePublicEvent": {
      "index": 41,
      "doc": " Event emitted when user secret key share is successfully made public.\n\n Signals that the dWallet has transitioned to trust-minimized mode where\n the network can now sign independently without user participation.\n\n ## Post-Transition Capabilities\n - Network can generate signatures autonomously\n - Reduced latency for signing operations\n - No user interaction required for each signature\n - Suitable for high-frequency automated applications\n\n ## ⚠️ Security Reminder\n The dWallet now operates in trust-minimized mode. Monitor validator\n behavior and consider the implications for your security model.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet that successfully transitioned to trust-minimized mode",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "public_user_secret_key_share": {
            "index": 1,
            "doc": " The user's secret key share that was made public",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "RejectedMakeDWalletUserSecretKeySharePublicEvent": {
      "index": 42,
      "doc": " Event emitted when the request to make user secret key share public is rejected.\n\n Indicates that the network could not validate or complete the transition\n to trust-minimized mode.\n\n ## Common Rejection Reasons\n - Invalid user secret key share provided\n - Mismatch between share and public output\n - dWallet already in trust-minimized mode\n - Network validation failures",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet that failed to transition to trust-minimized mode",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "PresignRequestEvent": {
      "index": 43,
      "doc": " Event requesting the generation of a presign from the validator network.\n\n This event initiates the precomputation of cryptographic material that will\n be used to accelerate future signature generation. Presigns are a key\n optimization in the 2PC-MPC protocol, reducing online signing time by 80-90%.\n\n ## Presign Types\n\n ### dWallet-Specific Presigns\n - Required for algorithms like ECDSA that need key-specific precomputation\n - Bound to a specific dWallet and cannot be used elsewhere\n - Higher security isolation but less resource efficiency\n\n ### Global Presigns\n - Supported by algorithms like Schnorr and EdDSA\n - Can be used with any compatible dWallet under the same network key\n - Better resource utilization and batching efficiency\n\n ## Performance Benefits\n - **Latency Reduction**: From seconds to milliseconds for signing\n - **Throughput Increase**: Enables high-frequency trading applications\n - **User Experience**: Near-instant signature generation\n - **Scalability**: Batch presign generation during low activity periods",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " Target dWallet ID for dWallet-specific presigns\n\n - `Some(id)`: dWallet-specific presign (required for ECDSA)\n - `None`: Global presign (available for Schnorr, EdDSA)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_id": {
            "index": 1,
            "doc": " Unique identifier for this presign session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_public_output": {
            "index": 2,
            "doc": " dWallet's public output for verification (None for global presigns)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "vector": "u8"
                    }
                  }
                ]
              }
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 3,
            "doc": " ID of the network encryption key securing the presign",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "curve": {
            "index": 4,
            "doc": " Elliptic curve for the presign computation",
            "type_": "u32"
          },
          "signature_algorithm": {
            "index": 5,
            "doc": " Signature algorithm for the presign (determines presign type)",
            "type_": "u32"
          }
        }
      }
    },
    "CompletedPresignEvent": {
      "index": 44,
      "doc": " Event emitted when a presign generation completes successfully.\n\n Signals that the validator network has successfully generated the\n cryptographic precomputation material and it's ready for use in\n accelerated signature generation.\n\n ## Next Steps\n 1. User receives a `VerifiedPresignCap` capability\n 2. Presign can be combined with message approval for fast signing\n 3. Single-use: Each presign can only be used once\n 4. Expiration: Presigns may have validity time limits\n\n ## Security Properties\n - Cryptographically bound to specific algorithm and curve\n - Cannot be used for different signature types\n - Single-use prevents double-spending of presign material\n - Network validation ensures correctness",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " Target dWallet ID (None for global presigns)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_id": {
            "index": 1,
            "doc": " Unique identifier for the completed presign",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "presign": {
            "index": 2,
            "doc": " Precomputed cryptographic material for signature acceleration",
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "RejectedPresignEvent": {
      "index": 45,
      "doc": " Event emitted when presign generation is rejected by the network.\n\n Indicates that the validator network could not complete the presign\n generation, typically due to validation failures or resource constraints.\n\n ## Common Rejection Reasons\n - Insufficient validator participation\n - Invalid cryptographic parameters\n - Network resource constraints\n - Validation failures during precomputation\n - Incompatible algorithm/curve combinations",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " Target dWallet ID (None for global presigns)",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "std",
                  "name": "option"
                },
                "name": "Option",
                "type_arguments": [
                  {
                    "phantom": false,
                    "argument": {
                      "Datatype": {
                        "module": {
                          "address": "sui",
                          "name": "object"
                        },
                        "name": "ID",
                        "type_arguments": []
                      }
                    }
                  }
                ]
              }
            }
          },
          "presign_id": {
            "index": 1,
            "doc": " ID of the presign that failed generation",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "SignRequestEvent": {
      "index": 46,
      "doc": " Event requesting signature generation from the validator network.\n\n This event initiates the final phase of the 2PC-MPC signing protocol where\n the network combines user authorization with precomputed material to generate\n a complete cryptographic signature.\n\n ## Signing Process Flow\n 1. User provides message approval and presign capability\n 2. Network validates the user's authorization\n 3. Network combines presign with user's partial signature\n 4. Complete signature is generated and returned\n\n ## Signature Types\n\n ### Standard Signing (`is_future_sign: false`)\n - Immediate user participation required\n - User signature computed in real-time\n - Highest security with fresh user authorization\n\n ### Future Signing (`is_future_sign: true`)\n - Uses pre-validated partial user signatures\n - Enables conditional and delayed execution\n - Supports complex multi-party transaction patterns\n\n ## Performance Optimization\n - Presign material enables sub-second signature generation\n - Critical for high-frequency trading and real-time applications\n - Reduces network round-trips and computational overhead",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "sign_id": {
            "index": 0,
            "doc": " Unique identifier for this signing session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_id": {
            "index": 1,
            "doc": " ID of the dWallet performing the signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "dwallet_public_output": {
            "index": 2,
            "doc": " dWallet's public output for signature verification",
            "type_": {
              "vector": "u8"
            }
          },
          "curve": {
            "index": 3,
            "doc": " Elliptic curve for the signature",
            "type_": "u32"
          },
          "signature_algorithm": {
            "index": 4,
            "doc": " Cryptographic signature algorithm",
            "type_": "u32"
          },
          "hash_scheme": {
            "index": 5,
            "doc": " Hash scheme applied to the message",
            "type_": "u32"
          },
          "message": {
            "index": 6,
            "doc": " Raw message bytes to be signed",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 7,
            "doc": " ID of the network encryption key securing network shares",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "presign_id": {
            "index": 8,
            "doc": " ID of the presign used for acceleration",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "presign": {
            "index": 9,
            "doc": " Precomputed cryptographic material for fast signing",
            "type_": {
              "vector": "u8"
            }
          },
          "message_centralized_signature": {
            "index": 10,
            "doc": " User's partial signature on the message",
            "type_": {
              "vector": "u8"
            }
          },
          "is_future_sign": {
            "index": 11,
            "doc": " Whether this uses future sign capabilities",
            "type_": "bool"
          }
        }
      }
    },
    "CompletedSignEvent": {
      "index": 47,
      "doc": " Event emitted when signature generation completes successfully.\n\n This event signals the successful completion of the 2PC-MPC signing protocol\n and provides the final cryptographic signature that can be used in transactions.\n\n ## Signature Properties\n - **Mathematically Valid**: Verifiable against the dWallet's public key\n - **Cryptographically Secure**: Generated using threshold cryptography\n - **Single-Use Presign**: Associated presign material is consumed\n - **User Authorized**: Includes validated user consent\n\n ## Next Steps\n 1. Extract the signature from the event\n 2. Combine with transaction data for blockchain submission\n 3. Verify signature matches expected format for target blockchain\n 4. Submit transaction to the destination network\n\n ## Performance Metrics\n With presigns, signature generation typically completes in:\n - **Standard Networks**: 100-500ms\n - **High-Performance Setup**: 50-100ms\n - **Without Presigns**: 2-5 seconds",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "sign_id": {
            "index": 0,
            "doc": " Unique identifier for the completed signing session",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "signature": {
            "index": 1,
            "doc": " Complete cryptographic signature ready for use",
            "type_": {
              "vector": "u8"
            }
          },
          "is_future_sign": {
            "index": 2,
            "doc": " Whether this signature used future sign capabilities",
            "type_": "bool"
          }
        }
      }
    },
    "RejectedSignEvent": {
      "index": 48,
      "doc": " Event emitted when signature generation is rejected by the network.\n\n Indicates that the validator network could not complete the signature\n generation, typically due to validation failures or protocol errors.\n\n ## Common Rejection Reasons\n - **Invalid Presign**: Presign material is corrupted or expired\n - **Authorization Failure**: User signature validation failed\n - **Network Issues**: Insufficient validator participation\n - **Protocol Errors**: Cryptographic validation failures\n - **Resource Constraints**: Network overload or rate limiting\n\n ## Recovery Steps\n 1. Check presign validity and obtain new presign if needed\n 2. Verify message approval is correctly formatted\n 3. Ensure dWallet is in active state\n 4. Retry with fresh authorization if temporary failure",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "sign_id": {
            "index": 0,
            "doc": " ID of the signing session that failed",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "is_future_sign": {
            "index": 1,
            "doc": " Whether this rejection involved future sign capabilities",
            "type_": "bool"
          }
        }
      }
    },
    "FutureSignRequestEvent": {
      "index": 49,
      "doc": " Event requesting validation of a partial user signature for future signing.\n\n This event initiates the creation of a conditional signature capability where\n the user's authorization is validated upfront but the network signature is\n deferred until specific conditions are met.\n\n ## Future Sign Use Cases\n\n ### Decentralized Exchange (DEX) Orders\n ```\n 1. User A: \"I'll sell 1 BTC for 50,000 USDC\"\n 2. User B: \"I'll buy 1 BTC for 50,000 USDC\"\n 3. When both conditions match → automatic execution\n ```\n\n ### Conditional Payments\n ```\n 1. User: \"Pay 1000 USDC to Alice when she delivers the goods\"\n 2. Oracle confirms delivery → automatic payment\n ```\n\n ### Multi-Party Atomic Swaps\n ```\n 1. Multiple users create conditional signatures\n 2. When all conditions are met → atomic execution\n ```\n\n ## Security Benefits\n - User authorization is cryptographically committed upfront\n - Network validation prevents invalid partial signatures\n - Conditions can be verified before execution\n - Atomic execution reduces counterparty risk",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet that will complete the future signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "partial_centralized_signed_message_id": {
            "index": 1,
            "doc": " ID of the partial user signature being validated",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "message": {
            "index": 2,
            "doc": " Message that will be signed when conditions are met",
            "type_": {
              "vector": "u8"
            }
          },
          "presign": {
            "index": 3,
            "doc": " Precomputed cryptographic material for the future signature",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_public_output": {
            "index": 4,
            "doc": " dWallet's public output for verification",
            "type_": {
              "vector": "u8"
            }
          },
          "curve": {
            "index": 5,
            "doc": " Elliptic curve for the signature",
            "type_": "u32"
          },
          "signature_algorithm": {
            "index": 6,
            "doc": " Signature algorithm for the future signature",
            "type_": "u32"
          },
          "hash_scheme": {
            "index": 7,
            "doc": " Hash scheme to be applied to the message",
            "type_": "u32"
          },
          "message_centralized_signature": {
            "index": 8,
            "doc": " User's partial signature proving authorization",
            "type_": {
              "vector": "u8"
            }
          },
          "dwallet_network_encryption_key_id": {
            "index": 9,
            "doc": " ID of the network encryption key",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "CompletedFutureSignEvent": {
      "index": 50,
      "doc": " Event emitted when future sign validation completes successfully.\n\n Signals that the network has validated the user's partial signature and\n the future sign capability is ready for conditional execution.\n\n ## Next Steps\n 1. User receives a `VerifiedPartialUserSignatureCap`\n 2. Capability can be combined with `MessageApproval` for execution\n 3. Network will complete the signature when both are presented\n 4. Enables complex conditional signing workflows",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet associated with the future signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "partial_centralized_signed_message_id": {
            "index": 1,
            "doc": " ID of the validated partial user signature",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "RejectedFutureSignEvent": {
      "index": 51,
      "doc": " Event emitted when future sign validation is rejected.\n\n Indicates that the network could not validate the user's partial signature,\n preventing the creation of the conditional signing capability.\n\n ## Common Rejection Reasons\n - Invalid user partial signature\n - Mismatch between signature and message\n - Incompatible presign material\n - dWallet validation failures",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "dwallet_id": {
            "index": 0,
            "doc": " ID of the dWallet associated with the failed request",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "partial_centralized_signed_message_id": {
            "index": 1,
            "doc": " ID of the partial user signature that failed validation",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "sui",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "DWalletCheckpointInfoEvent": {
      "index": 52,
      "doc": " Event containing dwallet 2pc-mpc checkpoint information, emitted during\n the checkpoint submission message.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "epoch": {
            "index": 0,
            "doc": null,
            "type_": "u64"
          },
          "sequence_number": {
            "index": 1,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    },
    "SetMaxActiveSessionsBufferEvent": {
      "index": 53,
      "doc": " Event requesting to set the maximum number of active sessions buffer.\n\n This event is used to configure the maximum number of active sessions that\n can be created at any given time. This is used to prevent the network from\n creating too many sessions and causing the validators to become out of sync.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "max_active_sessions_buffer": {
            "index": 0,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    },
    "SetGasFeeReimbursementSuiSystemCallValueEvent": {
      "index": 54,
      "doc": " Event requesting to set the gas fee reimbursement SUI system call value.\n\n This event is used to configure the gas fee reimbursement SUI system call value.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "gas_fee_reimbursement_sui_system_call_value": {
            "index": 0,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    },
    "EndOfEpochEvent": {
      "index": 55,
      "doc": " Event emitted when the epoch ends.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "epoch": {
            "index": 0,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    }
  },
  "enums": {
    "DWalletNetworkEncryptionKeyState": {
      "index": 0,
      "doc": " State of a dWallet network encryption key throughout its lifecycle",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "AwaitingNetworkDKG": {
          "index": 0,
          "doc": " DKG request was sent to the network, but didn't finish yet.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkDKGCompleted": {
          "index": 1,
          "doc": " Network DKG has completed successfully",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "AwaitingNetworkReconfiguration": {
          "index": 2,
          "doc": " Reconfiguration request was sent to the network, but didn't finish yet.",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkReconfigurationCompleted": {
          "index": 3,
          "doc": " Network reconfiguration has completed successfully",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        }
      }
    },
    "EncryptedUserSecretKeyShareState": {
      "index": 1,
      "doc": " State of an encrypted user secret key share throughout verification and acceptance",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "AwaitingNetworkVerification": {
          "index": 0,
          "doc": " Waiting for network to verify the encryption proof",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkVerificationCompleted": {
          "index": 1,
          "doc": " Network has successfully verified the encryption",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkVerificationRejected": {
          "index": 2,
          "doc": " Network has rejected the encryption verification",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "KeyHolderSigned": {
          "index": 3,
          "doc": " Key holder has signed and accepted the share",
          "fields": {
            "positional_fields": false,
            "fields": {
              "user_output_signature": {
                "index": 0,
                "doc": " The signed public share corresponding to the encrypted secret key share,\n used to verify its authenticity.",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        }
      }
    },
    "PartialUserSignatureState": {
      "index": 2,
      "doc": null,
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "AwaitingNetworkVerification": {
          "index": 0,
          "doc": null,
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkVerificationCompleted": {
          "index": 1,
          "doc": null,
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkVerificationRejected": {
          "index": 2,
          "doc": null,
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        }
      }
    },
    "DWalletState": {
      "index": 3,
      "doc": " State of a dWallet throughout its creation and operational lifecycle.\n\n dWallets can be created through two paths:\n 1. **DKG Path**: Distributed Key Generation with validator participation\n 2. **Import Path**: Importing existing private keys with network verification\n\n Both paths converge to the `Active` state where signing operations can be performed.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "DKGRequested": {
          "index": 0,
          "doc": " DKG first round has been requested from the network",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkRejectedDKGRequest": {
          "index": 1,
          "doc": " Network rejected the DKG first round request",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "AwaitingUserDKGVerificationInitiation": {
          "index": 2,
          "doc": " DKG first round completed, waiting for user to initiate second round",
          "fields": {
            "positional_fields": false,
            "fields": {
              "first_round_output": {
                "index": 0,
                "doc": " Output from the first round of DKG",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        },
        "AwaitingNetworkDKGVerification": {
          "index": 3,
          "doc": " DKG second round has been requested, waiting for network verification",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkRejectedDKGVerification": {
          "index": 4,
          "doc": " Network rejected the DKG second round verification",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "AwaitingNetworkImportedKeyVerification": {
          "index": 5,
          "doc": " Imported key verification requested, waiting for network verification",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkRejectedImportedKeyVerification": {
          "index": 6,
          "doc": " Network rejected the imported key verification",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "AwaitingKeyHolderSignature": {
          "index": 7,
          "doc": " DKG/Import completed, waiting for key holder to sign and accept",
          "fields": {
            "positional_fields": false,
            "fields": {
              "public_output": {
                "index": 0,
                "doc": " Public output from DKG or import verification",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        },
        "Active": {
          "index": 8,
          "doc": " dWallet is fully operational and ready for signing",
          "fields": {
            "positional_fields": false,
            "fields": {
              "public_output": {
                "index": 0,
                "doc": " The verified public output",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        }
      }
    },
    "PresignState": {
      "index": 4,
      "doc": " State progression of a presign session through its lifecycle.\n\n Presign sessions follow a linear progression from request to completion,\n with potential rejection at the network validation stage.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "Requested": {
          "index": 0,
          "doc": " Presign has been requested and is awaiting network processing",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkRejected": {
          "index": 1,
          "doc": " Network rejected the presign request (invalid parameters, insufficient resources, etc.)",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "Completed": {
          "index": 2,
          "doc": " Presign completed successfully with cryptographic material ready for use",
          "fields": {
            "positional_fields": false,
            "fields": {
              "presign": {
                "index": 0,
                "doc": " Precomputed cryptographic material for accelerated signing",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        }
      }
    },
    "SignState": {
      "index": 5,
      "doc": " State progression of a signing session through its lifecycle.\n\n Signing sessions combine user authorization with network cryptographic operations\n to produce final signatures.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "Requested": {
          "index": 0,
          "doc": " Signature has been requested and is awaiting network processing",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "NetworkRejected": {
          "index": 1,
          "doc": " Network rejected the signature request (invalid presign, unauthorized message, etc.)",
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "Completed": {
          "index": 2,
          "doc": " Signature completed successfully and ready for use",
          "fields": {
            "positional_fields": false,
            "fields": {
              "signature": {
                "index": 0,
                "doc": " Final cryptographic signature that can be verified against the public key",
                "type_": {
                  "vector": "u8"
                }
              }
            }
          }
        }
      }
    }
  }
}